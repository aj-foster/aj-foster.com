<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AJ Foster</title>
  <subtitle>Software, Math, and Robots</subtitle>
  <id>https://aj-foster.com</id>
  <link href="https://aj-foster.com/"/>
  <link href="https://aj-foster.com/feed.xml" rel="self"/>
  <updated>2025-09-13T21:20:29.414413Z</updated>
  <author>
    <name>AJ Foster</name>
  </author>

  
  
  <entry>
    <title>Handling AWS SNS Messages in Elixir</title>
    <link rel="alternate" href="https://aj-foster.com/2025/handle-sns-messages/"/>
    <id>https://aj-foster.com/2025/handle-sns-messages/</id>
    <updated>2025-05-26T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>An example of handling Amazon Web Services Simple Notification Service messages in an Elixir / Phoenix application.</summary>
    <content type="html">&lt;p&gt;
I recently wanted to accept messages from an Amazon Web Services &lt;a href=&quot;https://docs.aws.amazon.com/sns/latest/dg/welcome.html&quot;&gt;Simple Notification Service&lt;/a&gt; topic in an Elixir / Phoenix application.
An &lt;a href=&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-http-https-endpoint-as-subscriber.html&quot;&gt;HTTPS endpoint&lt;/a&gt; is just one way to subscribe to messages on a topic, but it’s the most relevant if you already have a web service running.
It took a bit of work — and the documentation led me astray for a while — so here’s a summary of the process.&lt;/p&gt;
&lt;h2&gt;
SNS Setup&lt;/h2&gt;
&lt;p&gt;
We aren’t going to focus on the full setup of the SNS topic, but there is one very important setting you’ll need to adjust.&lt;/p&gt;
&lt;p&gt;
By default, SNS sends messages with &lt;code class=&quot;inline&quot;&gt;Content-Type: text/plain; charset=UTF-8&lt;/code&gt;.
As a result, you must either:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
Manually decode the request body as JSON, or  &lt;/li&gt;
  &lt;li&gt;
Tell the SNS topic to send messages with the correct content type.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
The following Delivery Policy sets the content type while leaving all other settings at their default values:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;json&quot;&gt;{
  &amp;quot;http&amp;quot;: {
    &amp;quot;defaultHealthyRetryPolicy&amp;quot;: {
      &amp;quot;numRetries&amp;quot;: 3,
      &amp;quot;numNoDelayRetries&amp;quot;: null,
      &amp;quot;minDelayTarget&amp;quot;: 20,
      &amp;quot;maxDelayTarget&amp;quot;: 20,
      &amp;quot;numMinDelayRetries&amp;quot;: null,
      &amp;quot;numMaxDelayRetries&amp;quot;: null,
      &amp;quot;backoffFunction&amp;quot;: &amp;quot;linear&amp;quot;
    },
    &amp;quot;disableSubscriptionOverrides&amp;quot;: false,
    &amp;quot;defaultRequestPolicy&amp;quot;: {
      &amp;quot;headerContentType&amp;quot;: &amp;quot;application/json&amp;quot;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Without taking one of these steps, the incoming connection struct will have empty &lt;code class=&quot;inline&quot;&gt;body_params&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
Routing&lt;/h2&gt;
&lt;p&gt;
First we need to create the route for accepting the messages.
They will be HTTP POST requests at a path of your choosing.
I prefer to group webhook-like requests in a &lt;code class=&quot;inline&quot;&gt;/hook&lt;/code&gt; scope with routes describing their source:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;defmodule MyAppWeb.Router do
  # ...

  pipeline :hook do
    plug :accepts, [&amp;quot;json&amp;quot;]
  end

  scope &amp;quot;/hook&amp;quot;, MyAppWeb do
    pipe_through :hook

    post &amp;quot;/sns&amp;quot;, SNSController, :notification
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
We want to process the incoming requests as JSON, but we don’t want any of the other plugs that might be part of a typical &lt;code class=&quot;inline&quot;&gt;:api&lt;/code&gt; pipeline.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;: If you have experience dealing with webhooks, you may be inclined to modify the “reader” plug and ensure the original request body is preserved for verification later.
This is not necessary for verifying SNS messages.
All of the data you need comes from individual keys of the JSON body (not the raw body itself).&lt;/p&gt;
&lt;h2&gt;
Controller Action&lt;/h2&gt;
&lt;p&gt;
Let’s lay out a basic controller action to handle incoming messages:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;defmodule MyAppWeb.SNSController do
  use Phoenix.Controller, formats: [:json]
  import Plug.Conn

  action_fallback :fallback

  def notification(conn, params) do
    with :ok &amp;lt;- verify_message(params),
         :ok &amp;lt;- handle_management_messages(params) do
      # Handle message here.
      send_resp(conn, :ok, &amp;quot;&amp;quot;)
    end
  end

  #
  # Fallback
  #

  @doc false
  def fallback(conn, {:ignore, reason})
      when is_binary(reason),
      do: send_resp(conn, :ok, reason)

  def fallback(conn, {:error, code, reason})
      when is_atom(code) and is_binary(reason),
      do: send_resp(conn, code, reason)

  def fallback(conn, {:error, reason})
      when is_binary(reason),
      do: send_resp(conn, :internal_server_error, reason)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
There’s a lot going on already, so let’s break it down:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
While you can &lt;code class=&quot;inline&quot;&gt;use MyAppWeb, :controller&lt;/code&gt; as is normal in a Phoenix controller, we’ve skipped that and directly called the &lt;code class=&quot;inline&quot;&gt;use&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;import&lt;/code&gt;s we need.  &lt;/li&gt;
  &lt;li&gt;
If validating the authenticity of a message fails, we want to return an error and abort further processing.
An &lt;code class=&quot;inline&quot;&gt;action_fallback&lt;/code&gt; using a local function makes this easy while maintaining readability.  &lt;/li&gt;
  &lt;li&gt;
SNS sends two types of “management” messages, &lt;code class=&quot;inline&quot;&gt;SubscriptionConfirmation&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;UnsubscribeConfirmation&lt;/code&gt;.
Neither of these are messages that should be handled by our normal handler, so we will instead return &lt;code class=&quot;inline&quot;&gt;{:ignore, ...}&lt;/code&gt; to abort processing.  &lt;/li&gt;
  &lt;li&gt;
If we successfully handle a message, an empty 200 response is perfect.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Next we’ll fill in the details of &lt;code class=&quot;inline&quot;&gt;verify_message/1&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;handle_management_messages/1&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
Verify Messages&lt;/h2&gt;
&lt;p&gt;
Message verification ensures that messages come from Amazon, and not from some random person running a &lt;code class=&quot;inline&quot;&gt;curl&lt;/code&gt; command in their terminal.
It &lt;strong&gt;does not&lt;/strong&gt; tell us that the message came from the topic we expected — we still have to verify that ourselves — but it &lt;strong&gt;does&lt;/strong&gt; tell us that the topic listed in the message is accurate.&lt;/p&gt;
&lt;p&gt;
Amazon provides &lt;a href=&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-verify-signature-of-message.html&quot;&gt;some documentation&lt;/a&gt; about the process of verifying messages, and it’s a good idea to read through it.
However, there are a few details that may be misleading when implementing it in another language.
So, let’s talk through it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec verify_message(map) :: :ok | {:error, String.t()}
  defp verify_message(message) do
    string_to_sign = construct_signed_string(message) &amp;lt;&amp;gt; &amp;quot;\n&amp;quot;

    with {:ok, key} &amp;lt;- get_public_key(message[&amp;quot;SigningCertURL&amp;quot;]),
         {:ok, hash_algorithm} &amp;lt;- get_hash_algorithm(message[&amp;quot;SignatureVersion&amp;quot;]),
         {:ok, decoded_signature} &amp;lt;- decode_signature(message[&amp;quot;Signature&amp;quot;]) do
      if :public_key.verify(string_to_sign, hash_algorithm, decoded_signature, key) do
        :ok
      else
        {:error, &amp;quot;Signature verification failed&amp;quot;}
      end
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
To complete message verification, we will (1) construct the signed string, (2) get the public key used to sign the message, (3) determine the hash algorithm to use, (4) decode the signature, and (5) verify the signature.&lt;/p&gt;
&lt;h3&gt;
Construct Signed String&lt;/h3&gt;
&lt;p&gt;
Like many popular webhook providers, SNS provides a message &lt;em&gt;signature&lt;/em&gt; to provide cryptographic proof that a message comes from Amazon and has not been tampered with.
Unlike many popular webhook providers, the signature is not based on the full raw message body, but rather a subset of message fields that are concatenated together in a particular way.
(This is because the signature itself is part of the message body, rather than a header.)&lt;/p&gt;
&lt;p&gt;
As a result, we need to construct the signed string ourselves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec construct_signed_string(map) :: String.t()
  defp construct_signed_string(message)

  defp construct_signed_string(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;Notification&amp;quot;} = message) do
    subject = message[&amp;quot;Subject&amp;quot;]

    [
      &amp;quot;Message&amp;quot;,
      message[&amp;quot;Message&amp;quot;],
      &amp;quot;MessageId&amp;quot;,
      message[&amp;quot;MessageId&amp;quot;],
      if(subject, do: &amp;quot;Subject&amp;quot;),
      if(subject, do: subject),
      &amp;quot;Timestamp&amp;quot;,
      message[&amp;quot;Timestamp&amp;quot;],
      &amp;quot;TopicArn&amp;quot;,
      message[&amp;quot;TopicArn&amp;quot;],
      &amp;quot;Type&amp;quot;,
      message[&amp;quot;Type&amp;quot;]
    ]
    |&amp;gt; Enum.reject(&amp;amp;is_nil/1)
    |&amp;gt; Enum.join(&amp;quot;\n&amp;quot;)
  end

  # Catch-all: SubscriptionConfirmation and UnsubscribeConfirmation
  defp construct_signed_string(message) do
    [
      &amp;quot;Message&amp;quot;,
      message[&amp;quot;Message&amp;quot;],
      &amp;quot;MessageId&amp;quot;,
      message[&amp;quot;MessageId&amp;quot;],
      &amp;quot;SubscribeURL&amp;quot;,
      message[&amp;quot;SubscribeURL&amp;quot;],
      &amp;quot;Timestamp&amp;quot;,
      message[&amp;quot;Timestamp&amp;quot;],
      &amp;quot;Token&amp;quot;,
      message[&amp;quot;Token&amp;quot;],
      &amp;quot;TopicArn&amp;quot;,
      message[&amp;quot;TopicArn&amp;quot;],
      &amp;quot;Type&amp;quot;,
      message[&amp;quot;Type&amp;quot;]
    ]
    |&amp;gt; Enum.join(&amp;quot;\n&amp;quot;)
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
As mentioned in &lt;a href=&quot;https://docs.aws.amazon.com/sns/latest/dg/sns-verify-signature-of-message-verify-message-signature.html&quot;&gt;the documentation&lt;/a&gt;, we extract certain fields from the message depending on the message type.
If the subject field is empty, we omit it.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Warning&lt;/strong&gt;: At the time of writing, the instructions also say “Important: Do not add a newline character at the end of the string.”
This is misleading, as the binary passed to &lt;code class=&quot;inline&quot;&gt;:public_key.verify/4&lt;/code&gt; must have a trailing newline in order to succeed.
However, this newline is implicitly added in their example &lt;code class=&quot;inline&quot;&gt;echo&lt;/code&gt; command, so it’s important not to add &lt;em&gt;an additional newline&lt;/em&gt; at the end.
I’ve sent in feedback on how this might be worded better.&lt;/p&gt;
&lt;p&gt;
We add a final newline to the constructed string back in &lt;code class=&quot;inline&quot;&gt;verify_message/1&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
Get Public Key&lt;/h3&gt;
&lt;p&gt;
The message signature is created using a public key provided by Amazon.
In order to verify it, we have to download and decode the key.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec get_public_key(String.t()) :: {:ok, :public_key.public_key()} | {:error, String.t()}
  defp get_public_key(signing_cert_url) do
    if key = :persistent_term.get({__MODULE__, signing_cert_url}, nil) do
      {:ok, key}
    else
      with :ok &amp;lt;- validate_signing_cert_url(signing_cert_url),
           {:ok, cert} &amp;lt;- download_signing_cert(signing_cert_url),
           {:ok, key} &amp;lt;- decode_signing_cert(cert) do
        :persistent_term.put({__MODULE__, signing_cert_url}, key)
        {:ok, key}
      end
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Because this step requires making an external network call, it isn’t something we want to repeat for every message that arrives.
We can store the results of the decoding in &lt;code class=&quot;inline&quot;&gt;persistent_term&lt;/code&gt; storage (or something similar, like an ETS table) to improve performance.&lt;/p&gt;
&lt;p&gt;
The process fo downloading and decoding the certificate requires:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
Validating the certificate URL to ensure it comes from Amazon,  &lt;/li&gt;
  &lt;li&gt;
Downloading the certificate, and   &lt;/li&gt;
  &lt;li&gt;
Decoding the public key from the certificate file.  &lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
Validate Certificate URL&lt;/h4&gt;
&lt;p&gt;
In order to avoid downloading and processing a potentially malicious file, we need to validate that the signing certificate URL provided in the message is trustworthy.
Valid signing certificates are hosted at &lt;code class=&quot;inline&quot;&gt;sns.[region].amazonaws.com&lt;/code&gt;, so we can check the hostname against this pattern:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec validate_signing_cert_url(String.t()) :: :ok | {:error, String.t()}
  defp validate_signing_cert_url(signing_cert_url) do
    valid_hostname? =
      URI.parse(signing_cert_url).host
      |&amp;gt; String.match?(~r/^sns\.[a-zA-Z0-9\-]+\.amazonaws\.com$/)

    if valid_hostname? do
      :ok
    else
      {:error, &amp;quot;Invalid signing certificate URL&amp;quot;}
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;
Download Signing Certificate&lt;/h4&gt;
&lt;p&gt;
Downloading the certificate file is straightforward using your HTTP client of choice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec download_signing_cert(String.t()) :: {:ok, binary} | {:error, String.t()}
  defp download_signing_cert(signing_cert_url) do
    case Req.get(signing_cert_url) do
      {:ok, %Req.Response{status: 200, body: body}} -&amp;gt;
        {:ok, body}

      {:ok, %Req.Response{status: status}} when status in 400..599 -&amp;gt;
        {:error, &amp;quot;Failed to fetch signing certificate: HTTP #{status}&amp;quot;}

      {:error, reason} -&amp;gt;
        {:error, &amp;quot;Failed to fetch signing certificate: #{inspect(reason)}&amp;quot;}
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;
Decode Signing Certificate&lt;/h4&gt;
&lt;p&gt;
The certificate we get from Amazon has a lot of information beside the public key we need to validate the message signature.
Luckily, Erlang provides standard library functions for decoding and verifying.
Unfortunately, this process makes heavy use of Erlang records, which don’t have first-class support in Elixir.&lt;/p&gt;
&lt;p&gt;
Let’s begin by creating macros for the records we’ll need to destructure.
This code, like all of the functions we’ve defined so far, goes inside the controller module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  require Record

  Record.defrecord(
    :otp_certificate,
    Record.extract(:OTPCertificate, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )

  Record.defrecord(
    :otp_tbs_certificate,
    Record.extract(:OTPTBSCertificate, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )

  Record.defrecord(
    :otp_subject_public_key_info,
    Record.extract(:OTPSubjectPublicKeyInfo, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
These records work from outside-in.
When using the &lt;code class=&quot;inline&quot;&gt;:otp&lt;/code&gt; mode to decode the certificate, the information we want is inside an &lt;code class=&quot;inline&quot;&gt;OTPCertificate&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;OTPTBSCertificate&lt;/code&gt;, and &lt;code class=&quot;inline&quot;&gt;OTPSubjectPublicKeyInfo&lt;/code&gt; record.
In Erlang, we would access the public key using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;erlang&quot;&gt;Cert#&amp;#39;OTPCertificate&amp;#39;.tbsCertificate#&amp;#39;OTPTBSCertificate&amp;#39;.subjectPublicKeyInfo#&amp;#39;OTPSubjectPublicKeyInfo&amp;#39;.subjectPublicKey&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Luckily, once we generate the helper macros, we can do this in a pipeline:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec decode_signing_cert(binary) :: {:ok, :public_key.public_key()} | {:error, String.t()}
  defp decode_signing_cert(cert) do
    :public_key.pem_decode(cert)
    |&amp;gt; then(&amp;amp;:lists.keysearch(:Certificate, 1, &amp;amp;1))
    |&amp;gt; then(fn {:value, {:Certificate, cert, :not_encrypted}} -&amp;gt; cert end)
    |&amp;gt; :public_key.pkix_decode_cert(:otp)
    |&amp;gt; otp_certificate(:tbsCertificate)
    |&amp;gt; otp_tbs_certificate(:subjectPublicKeyInfo)
    |&amp;gt; otp_subject_public_key_info(:subjectPublicKey)
    |&amp;gt; then(&amp;amp;{:ok, &amp;amp;1})
  rescue
    _ -&amp;gt; {:error, &amp;quot;Failed to decode signing certificate&amp;quot;}
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This function is particularly dense.
If you’re curious, check out the documentation (and source!) for the Erlang &lt;code class=&quot;inline&quot;&gt;public_key:pem_decode/1&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;public_key:pkix_decode_cert/2&lt;/code&gt; functions.
Reading through it gave me an appreciation for the technical details involved in asymmetric cryptography, which we sometimes take for granted.&lt;/p&gt;
&lt;p&gt;
It’s slightly lazy to use a generic &lt;code class=&quot;inline&quot;&gt;rescue&lt;/code&gt; in this way, but there are many different things that can go wrong during this decoding process if we are presented with a certificate that does not conform to our narrow expectations.
Rescue, and move on.&lt;/p&gt;
&lt;h3&gt;
Hash Algorithm and Signature&lt;/h3&gt;
&lt;p&gt;
As if this process weren’t involved enough, messages may use one of two different hashing algorithms (SHA-1 and SHA-256) depending on their &lt;code class=&quot;inline&quot;&gt;SignatureVersion&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Note&lt;/strong&gt;: It is recommended by Amazon to set the signature version of the topic to &lt;code class=&quot;inline&quot;&gt;&amp;quot;2&amp;quot;&lt;/code&gt; for enhanced security.&lt;/p&gt;
&lt;p&gt;
Translating the signature version is simple, but first we have to browse through a few levels of Erlang type definitions to find the right atoms to use (starting with the spec for &lt;code class=&quot;inline&quot;&gt;public_key:verify/4&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec get_hash_algorithm(integer) :: {:ok, :sha | :sha256} | {:error, String.t()}
  defp get_hash_algorithm(&amp;quot;1&amp;quot;), do: {:ok, :sha}
  defp get_hash_algorithm(&amp;quot;2&amp;quot;), do: {:ok, :sha256}
  defp get_hash_algorithm(_), do: {:error, &amp;quot;Unsupported signature version&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Our signature needs to be decoded from base-64 before being passed to the verification:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec decode_signature(String.t()) :: {:ok, binary} | {:error, String.t()}
  defp decode_signature(signature) do
    case Base.decode64(signature) do
      {:ok, decoded_signature} -&amp;gt; {:ok, decoded_signature}
      :error -&amp;gt; {:error, &amp;quot;Invalid signature format&amp;quot;}
    end
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now we have all of the data we need to run the verification.&lt;/p&gt;
&lt;h3&gt;
Verify the Signature&lt;/h3&gt;
&lt;p&gt;
Everything we’ve done so far has been an elaborate preparation for a single function call:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;:public_key.verify(string_to_sign, hash_algorithm, decoded_signature, key)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It returns a simple &lt;code class=&quot;inline&quot;&gt;true&lt;/code&gt; or &lt;code class=&quot;inline&quot;&gt;false&lt;/code&gt; response for our troubles.
Calling this function is preferred because it works with several different key types without additional processing.
Erlang’s &lt;code class=&quot;inline&quot;&gt;crypto:verify/5&lt;/code&gt; is also available, but we would have to detect the key type and extract its data.&lt;/p&gt;
&lt;p&gt;
If the message is valid, we continue.
Otherwise, we can immediately return an error.&lt;/p&gt;
&lt;h2&gt;
Handle Management Messages&lt;/h2&gt;
&lt;p&gt;
SNS has two message types, &lt;code class=&quot;inline&quot;&gt;SubscriptionConfirmation&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;UnsubscribeConfirmation&lt;/code&gt;, that should not be processed by our normal message handlers.
For these, we will take any necessary action, and return &lt;code class=&quot;inline&quot;&gt;{:ignore, ...}&lt;/code&gt; to escape processing early.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  @spec handle_management_messages(map) ::
          :ok | {:ignore, String.t()} | {:error, atom, String.t()}
  defp handle_management_messages(message)

  defp handle_management_messages(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;UnsubscribeConfirmation&amp;quot;}) do
    {:ignore, &amp;quot;Unsubscribe confirmation; not a notification&amp;quot;}
  end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
There’s generally no action necessary when receiving an unsubscribe confirmation.
We have a little more work to do for subscription confirmations, however.
SNS requires subscriptions are &lt;a href=&quot;https://docs.aws.amazon.com/sns/latest/dg/SendMessageToHttp.confirm.html&quot;&gt;confirmed&lt;/a&gt; by clicking a link in the message.
We should only do this if the SNS topic matches one that we want to subscribe to; otherwise, someone can subscribe our application to a real SNS topic that they control.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;  defp handle_management_messages(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;SubscriptionConfirmation&amp;quot;} = message) do
    # TODO: Check if the `Topic` is one we care about.
    case Req.get(message[&amp;quot;SubscribeURL&amp;quot;]) do
      {:ok, %Req.Response{status: 200}} -&amp;gt;
        {:ignore, &amp;quot;Subscription confirmation; not a notification&amp;quot;}

      {:ok, %Req.Response{status: status}} when status in 400..599 -&amp;gt;
        {:error, :bad_request, &amp;quot;Failed to confirm subscription: HTTP #{status}&amp;quot;}

      {:error, reason} -&amp;gt;
        {:error, :internal_server_error, &amp;quot;Failed to confirm subscription: #{inspect(reason)}&amp;quot;}
    end
  end

  defp handle_management_messages(_params), do: :ok&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
These additional clauses visit the confirmation URL, if necessary, or simply continue processing of the message for regular notifications.&lt;/p&gt;
&lt;h2&gt;
Other Considerations&lt;/h2&gt;
&lt;p&gt;
Above we note that we should only perform subscription confirmations when we recognize the SNS topic.
Another way to address the issue of potentially receiving subscription confirmations from unknown topics is with HTTP Basic Auth.
SNS supports providing a username / password combination to include in message deliveries.
Meanwhile, Plug provides &lt;a href=&quot;https://hexdocs.pm/plug/Plug.BasicAuth.html&quot;&gt;&lt;code class=&quot;inline&quot;&gt;Plug.BasicAuth&lt;/code&gt;&lt;/a&gt; to help us integrate this into our application.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Warning&lt;/strong&gt;: It is recommended to use runtime confirmation for authentication secrets like this.
As a result, we need to use the indirect approach documented &lt;a href=&quot;https://hexdocs.pm/plug/Plug.BasicAuth.html#module-runtime-time-usage&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Putting it all Together&lt;/h2&gt;
&lt;p&gt;
Here’s the complete module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;defmodule MyAppWeb.SNSController do
  use Phoenix.Controller, formats: [:json]
  import Plug.Conn

  action_fallback :fallback

  def notification(conn, params) do
    with :ok &amp;lt;- verify_message(params),
         :ok &amp;lt;- handle_management_messages(params) do
      # Handle message here.
      send_resp(conn, :ok, &amp;quot;&amp;quot;)
    end
  end

  #
  # Fallback
  #

  @doc false
  def fallback(conn, {:ignore, reason})
      when is_binary(reason),
      do: send_resp(conn, :ok, reason)

  def fallback(conn, {:error, code, reason})
      when is_atom(code) and is_binary(reason),
      do: send_resp(conn, code, reason)

  def fallback(conn, {:error, reason})
      when is_binary(reason),
      do: send_resp(conn, :internal_server_error, reason)

  #
  # Verify
  #

  require Record

  Record.defrecord(
    :otp_certificate,
    Record.extract(:OTPCertificate, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )

  Record.defrecord(
    :otp_tbs_certificate,
    Record.extract(:OTPTBSCertificate, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )

  Record.defrecord(
    :otp_subject_public_key_info,
    Record.extract(:OTPSubjectPublicKeyInfo, from_lib: &amp;quot;public_key/include/public_key.hrl&amp;quot;)
  )

  @spec verify_message(map) :: :ok | {:error, String.t()}
  defp verify_message(message) do
    string_to_sign = construct_signed_string(message) &amp;lt;&amp;gt; &amp;quot;\n&amp;quot;

    with {:ok, key} &amp;lt;- get_public_key(message[&amp;quot;SigningCertURL&amp;quot;]),
         {:ok, hash_algorithm} &amp;lt;- get_hash_algorithm(message[&amp;quot;SignatureVersion&amp;quot;]),
         {:ok, decoded_signature} &amp;lt;- decode_signature(message[&amp;quot;Signature&amp;quot;]) do
      if :public_key.verify(string_to_sign, hash_algorithm, decoded_signature, key) do
        :ok
      else
        {:error, &amp;quot;Signature verification failed&amp;quot;}
      end
    end
  end

  @spec construct_signed_string(map) :: String.t()
  defp construct_signed_string(message)

  defp construct_signed_string(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;Notification&amp;quot;} = message) do
    subject = message[&amp;quot;Subject&amp;quot;]

    [
      &amp;quot;Message&amp;quot;,
      message[&amp;quot;Message&amp;quot;],
      &amp;quot;MessageId&amp;quot;,
      message[&amp;quot;MessageId&amp;quot;],
      if(subject, do: &amp;quot;Subject&amp;quot;),
      if(subject, do: subject),
      &amp;quot;Timestamp&amp;quot;,
      message[&amp;quot;Timestamp&amp;quot;],
      &amp;quot;TopicArn&amp;quot;,
      message[&amp;quot;TopicArn&amp;quot;],
      &amp;quot;Type&amp;quot;,
      message[&amp;quot;Type&amp;quot;]
    ]
    |&amp;gt; Enum.reject(&amp;amp;is_nil/1)
    |&amp;gt; Enum.join(&amp;quot;\n&amp;quot;)
  end

  defp construct_signed_string(message) do
    [
      &amp;quot;Message&amp;quot;,
      message[&amp;quot;Message&amp;quot;],
      &amp;quot;MessageId&amp;quot;,
      message[&amp;quot;MessageId&amp;quot;],
      &amp;quot;SubscribeURL&amp;quot;,
      message[&amp;quot;SubscribeURL&amp;quot;],
      &amp;quot;Timestamp&amp;quot;,
      message[&amp;quot;Timestamp&amp;quot;],
      &amp;quot;Token&amp;quot;,
      message[&amp;quot;Token&amp;quot;],
      &amp;quot;TopicArn&amp;quot;,
      message[&amp;quot;TopicArn&amp;quot;],
      &amp;quot;Type&amp;quot;,
      message[&amp;quot;Type&amp;quot;]
    ]
    |&amp;gt; Enum.join(&amp;quot;\n&amp;quot;)
  end

  @spec get_public_key(String.t()) :: {:ok, :public_key.public_key()} | {:error, String.t()}
  defp get_public_key(signing_cert_url) do
    if key = :persistent_term.get({__MODULE__, signing_cert_url}, nil) do
      {:ok, key}
    else
      with :ok &amp;lt;- validate_signing_cert_url(signing_cert_url),
           {:ok, cert} &amp;lt;- download_signing_cert(signing_cert_url),
           {:ok, key} &amp;lt;- decode_signing_cert(cert) do
        :persistent_term.put({__MODULE__, signing_cert_url}, key)
        {:ok, key}
      end
    end
  end

  @spec validate_signing_cert_url(String.t()) :: :ok | {:error, String.t()}
  defp validate_signing_cert_url(signing_cert_url) do
    valid_hostname? =
      URI.parse(signing_cert_url).host
      |&amp;gt; String.match?(~r/sns\.[a-zA-z0-9\-]+\.amazonaws\.com/)

    if valid_hostname? do
      :ok
    else
      {:error, &amp;quot;Invalid signing certificate URL&amp;quot;}
    end
  end

  @spec download_signing_cert(String.t()) :: {:ok, binary} | {:error, String.t()}
  defp download_signing_cert(signing_cert_url) do
    case Req.get(signing_cert_url) do
      {:ok, %Req.Response{status: 200, body: body}} -&amp;gt;
        {:ok, body}

      {:ok, %Req.Response{status: status}} when status in 400..599 -&amp;gt;
        {:error, &amp;quot;Failed to fetch signing certificate: HTTP #{status}&amp;quot;}

      {:error, reason} -&amp;gt;
        {:error, &amp;quot;Failed to fetch signing certificate: #{inspect(reason)}&amp;quot;}
    end
  end

  @spec decode_signing_cert(binary) :: {:ok, :public_key.public_key()} | {:error, String.t()}
  defp decode_signing_cert(cert) do
    :public_key.pem_decode(cert)
    |&amp;gt; then(&amp;amp;:lists.keysearch(:Certificate, 1, &amp;amp;1))
    |&amp;gt; then(fn {:value, {:Certificate, cert, :not_encrypted}} -&amp;gt; cert end)
    |&amp;gt; :public_key.pkix_decode_cert(:otp)
    |&amp;gt; otp_certificate(:tbsCertificate)
    |&amp;gt; otp_tbs_certificate(:subjectPublicKeyInfo)
    |&amp;gt; otp_subject_public_key_info(:subjectPublicKey)
    |&amp;gt; then(&amp;amp;{:ok, &amp;amp;1})
  rescue
    _ -&amp;gt;
      {:error, &amp;quot;Failed to decode signing certificate&amp;quot;}
  end

  @spec get_hash_algorithm(integer) :: {:ok, :sha | :sha256} | {:error, String.t()}
  defp get_hash_algorithm(&amp;quot;1&amp;quot;), do: {:ok, :sha}
  defp get_hash_algorithm(&amp;quot;2&amp;quot;), do: {:ok, :sha256}
  defp get_hash_algorithm(_), do: {:error, &amp;quot;Unsupported signature version&amp;quot;}

  @spec decode_signature(String.t()) :: {:ok, binary} | {:error, String.t()}
  defp decode_signature(signature) do
    case Base.decode64(signature) do
      {:ok, decoded_signature} -&amp;gt; {:ok, decoded_signature}
      :error -&amp;gt; {:error, &amp;quot;Invalid signature format&amp;quot;}
    end
  end

  #
  # Confirm Subscription
  #

  @spec handle_management_messages(map) ::
          :ok | {:ignore, String.t()} | {:error, atom, String.t()}
  defp handle_management_messages(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;SubscriptionConfirmation&amp;quot;} = message) do
    case Req.get(message[&amp;quot;SubscribeURL&amp;quot;]) do
      {:ok, %Req.Response{status: 200}} -&amp;gt;
        {:ignore, &amp;quot;Subscription confirmation; not a notification&amp;quot;}

      {:ok, %Req.Response{status: status}} when status in 400..599 -&amp;gt;
        {:error, :bad_request, &amp;quot;Failed to confirm subscription: HTTP #{status}&amp;quot;}

      {:error, reason} -&amp;gt;
        {:error, :internal_server_error, &amp;quot;Failed to confirm subscription: #{inspect(reason)}&amp;quot;}
    end
  end

  defp handle_management_messages(%{&amp;quot;Type&amp;quot; =&amp;gt; &amp;quot;UnsubscribeConfirmation&amp;quot;}) do
    {:ignore, &amp;quot;Unsubscribe confirmation; not a notification&amp;quot;}
  end

  defp handle_management_messages(_params), do: :ok
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
It’s a lot of processing for this kind of webhook, but also not so much that it requires the creation of a library.
Adding logs is a good idea to help diagnose message verification failures in the future.&lt;/p&gt;
&lt;p&gt;
Remember to set the content type and signature versions on your topics.&lt;/p&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Integrating Honeycomb.io with Elixir</title>
    <link rel="alternate" href="https://aj-foster.com/2023/honeycomb-elixir/"/>
    <id>https://aj-foster.com/2023/honeycomb-elixir/</id>
    <updated>2023-02-10T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Focused directions for integrating Honeycomb.io into your Elixir application with OpenTelemetry for observability.</summary>
    <content type="html">&lt;p&gt;
We recently tried &lt;a href=&quot;https://honeycomb.io&quot;&gt;Honeycomb.io&lt;/a&gt; at work for observability.
A lot has changed in this space over the past year, so it took some work to figure out the right way to do it.
This article documents the steps we took.&lt;/p&gt;
&lt;p class=&quot;note callout&quot;&gt;
If you’re looking for an explanation of observability and how it relates to Elixir, OpenTelemetry, etc., &lt;a href=&quot;https://davelucia.com/blog/observing-elixir-with-lightstep&quot;&gt;Dave Lucia&lt;/a&gt; has a great article for this.
It even covers some of the steps mentioned here.
In this article, we’ll focus more on the code.&lt;/p&gt;
&lt;h2&gt;
Set Up Honeycomb&lt;/h2&gt;
&lt;p&gt;
To start, you will need to set up the following &lt;a href=&quot;https://honeycomb.io&quot;&gt;in Honeycomb&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;
An &lt;strong&gt;account&lt;/strong&gt;, if you don’t already have one.
You can &lt;a href=&quot;https://ui.honeycomb.io/signup&quot;&gt;sign up for free&lt;/a&gt;.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
An &lt;strong&gt;environment&lt;/strong&gt;.
Honeycomb creates a &lt;code class=&quot;inline&quot;&gt;test&lt;/code&gt; environment by default.    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;
An &lt;strong&gt;API key&lt;/strong&gt;.
Honeycomb generates one by default, however you may want to generate an app-specific key instead.
This requires Team Owner permissions.
The API key should have “Send Events” permission as well as “Create Datasets” if you want it to implicitly create a new dataset for your app.    &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
We will use the API key later when configuring the exporter.&lt;/p&gt;
&lt;h2&gt;
Install Dependencies&lt;/h2&gt;
&lt;p&gt;
The following packages are required for all installations.&lt;/p&gt;
&lt;p class=&quot;note callout&quot;&gt;
&lt;strong&gt;Note&lt;/strong&gt;: It is important to list &lt;code class=&quot;inline&quot;&gt;:opentelemetry_exporter&lt;/code&gt; first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;def deps do
  [
    # ...
    {:opentelemetry_exporter, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_api, &amp;quot;~&amp;gt; 1.0&amp;quot;}
  ]
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
These packages provide the base for collecting and exporting metrics.
Following are a few packages that help to instrument common Elixir libraries:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;def deps do
  [
    # ...
    {:opentelemetry_absinthe, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_cowboy, &amp;quot;~&amp;gt; 0.2.0&amp;quot;},
    {:opentelemetry_ecto, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_liveview, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_oban, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_phoenix, &amp;quot;~&amp;gt; 1.0&amp;quot;},
    {:opentelemetry_redix, &amp;quot;~&amp;gt; 0.1.0&amp;quot;},
    {:opentelemetry_tesla, &amp;quot;~&amp;gt; 1.0&amp;quot;}
  ]
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Thanks to common naming conventions, you can search for other libraries &lt;a href=&quot;https://hex.pm/packages?search=opentelemetry&amp;sort=recent_downloads&quot;&gt;on Hex.pm&lt;/a&gt;.
If you can’t find what you’re looking for, you could use &lt;code class=&quot;inline&quot;&gt;:opentelemetry_telemetry&lt;/code&gt; to hook into Erlang Telemetry events manually, or consider creating your own package for the community.&lt;/p&gt;
&lt;h2&gt;
Instrument Libraries&lt;/h2&gt;
&lt;p&gt;
If you choose to install any of the additional packages above, most require a function call in the &lt;code class=&quot;inline&quot;&gt;start/1&lt;/code&gt; function of your &lt;code class=&quot;inline&quot;&gt;Application&lt;/code&gt; module to get set up.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;def start(_type, _args) do
  # ...
  OpentelemetryAbsinthe.setup()
  :opentelemetry_cowboy.setup()
  OpentelemetryEcto.setup([:my_app, :repo])
  OpentelemetryLiveView.setup()
  OpentelemetryOban.setup()
  OpentelemetryPhoenix.setup(adapter: :cowboy2)
  OpentelemetryRedix.setup()
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
  Be sure to replace &lt;code&gt;:my_app&lt;/code&gt; with the name of your OTP application.
For Phoenix &lt;sup&gt;&lt;a href=&quot;#footnote-1&quot; id=&quot;footnote-1-source&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, you should also ensure you have a call to `Plug.Telemetry` in your Endpoint module:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;plug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
And Tesla requires its instrumentation to be inserted as middleware. Of course, you should consult the documentation of each package for the latest installation instructions.&lt;/p&gt;
&lt;h2&gt;
Configuration&lt;/h2&gt;
&lt;p&gt;
Now it’s time to configure the various libraries.&lt;/p&gt;
&lt;h3&gt;
Release Configuration&lt;/h3&gt;
&lt;p&gt;
First, we need to instruct OpenTelemetry how to run when running in a Mix Release.
(If you are not using Mix Releases for your application, you can skip this.)
Modify the release configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;def project do
  [
    # ...
    releases: [
      my_app: [
        applications: [
          opentelemetry_exporter: :permanent,
          opentelemetry: :temporary
        ]
      ]
    ]
  ]
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This accomplishes two things: first, it ensures &lt;code class=&quot;inline&quot;&gt;opentelemetry_exporter&lt;/code&gt; and all of its dependencies start first, and second, it allows &lt;code class=&quot;inline&quot;&gt;opentelemetry&lt;/code&gt; to crash without taking down the rest of the application.
The thinking is that an unobserved but running application is better than a crashed one.&lt;/p&gt;
&lt;h3&gt;
Resource Attribute Configuration&lt;/h3&gt;
&lt;p&gt;
Next, we can inform OpenTelemetry about the environment in which our application runs.
This is most likely something we want to do using runtime configuration.
There are a number of &lt;a href=&quot;https://opentelemetry.io/docs/reference/specification/resource/semantic_conventions/&quot;&gt;resource descriptors&lt;/a&gt; available, which can be compiled into a single environment variable &lt;code class=&quot;inline&quot;&gt;OTEL_RESOURCE_ATTRIBUTES&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; passed to the application environment:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;# config/runtime.exs

config :opentelemetry, resource: [
  service: [
    name: &amp;quot;api&amp;quot;,
    namespace: &amp;quot;MyApp&amp;quot;,
    # ...
  ],
  host: [
    name: System.fetch_env!(&amp;quot;HOST&amp;quot;),
    # ...
  ]
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
For an example of compiling resource attributes into an environment variable, see &lt;a href=&quot;https://davelucia.com/blog/observing-elixir-with-lightstep&quot;&gt;Dave Lucia’s post&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Tracer Configuration&lt;/h3&gt;
&lt;p&gt;
Now we need to start connecting the various pieces of machinery we’ve defined.
By default, we can disable the export of trace information (for development and testing), and turn it on for production.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;# config/config.exs

config :opentelemetry,
  span_processor: :batch,
  traces_exporter: :none

# config/prod.exs

config :opentelemetry,
  traces_exporter: :otlp&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;
Sampling Configuration&lt;/h3&gt;
&lt;p&gt;
Honeycomb’s pricing is event-based, and they include the following note in &lt;a href=&quot;https://docs.honeycomb.io/manage-data-volume/sampling/&quot;&gt;their documentation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
If your service receives more than 1000 requests per second, sampling should be part of your observability journey.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
With OpenTelemetry, we can configure a sampler that will both limit the number of events sent to Honeycomb and ensure that reported traces are complete.
This requires determining whether to sample a trace based on the root trace ID, and ensuring that all child spans follow the same decision.&lt;/p&gt;
&lt;p&gt;
Luckily, this functionality is built in.
In the following configuration, we use a parent-based sampler to ensure that all child spans match the sampling decision of their parent.
Then, for the root span, we use a trace ID-based ratio to keep a percentage of traces.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;config :opentelemetry,
  sampler: {:parent_based, %{root: {:trace_id_ratio_based, 0.01}}}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This &lt;code class=&quot;inline&quot;&gt;sampler&lt;/code&gt; key can be added to an existing &lt;code class=&quot;inline&quot;&gt;opentelemetry&lt;/code&gt; configuration block.
A float between &lt;code class=&quot;inline&quot;&gt;0.0&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;1.0&lt;/code&gt; defines how many traces to keep: &lt;code class=&quot;inline&quot;&gt;0.0&lt;/code&gt; for none, &lt;code class=&quot;inline&quot;&gt;0.1&lt;/code&gt; for keeping 10% of all traces, and &lt;code class=&quot;inline&quot;&gt;1.0&lt;/code&gt; for keeping all of them.&lt;/p&gt;
&lt;p&gt;
Samplers adhere to the &lt;code class=&quot;inline&quot;&gt;:otel_sampler&lt;/code&gt; behaviour.
In the future, you can create your own sampler module that behaves differently depending on the root span’s name, for example, or the outcome of the request.&lt;/p&gt;
&lt;h3&gt;
Honeycomb Configuration&lt;/h3&gt;
&lt;p&gt;
Finally, we can tell our application about Honeycomb.
Because this involves an API key, we likely want to do this using runtime configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;# config/runtime.exs

config :opentelemetry_exporter,
  otlp_protocol: :http_protobuf,
  otlp_endpoint: &amp;quot;https://api.honeycomb.io:443&amp;quot;,
  otlp_headers: [
    {&amp;quot;x-honeycomb-team&amp;quot;, System.fetch_env!(&amp;quot;HONEYCOMB_API_KEY&amp;quot;)},
    {&amp;quot;x-honeycomb-dataset&amp;quot;, &amp;quot;MyApp&amp;quot;}
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The next time the application starts in production, it will begin sending data to Honeycomb.&lt;/p&gt;
&lt;h2&gt;
Conclusion&lt;/h2&gt;
&lt;p&gt;
OpenTelemetry is relatively new in the Erlang and Elixir ecosystem.
If you find yourself working with it, there’s a great opportunity to contribute documentation and guides.&lt;/p&gt;
&lt;p&gt;
Good luck on your observability journey!&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;ol class=&quot;my-8&quot;&gt;
    &lt;li id=&quot;footnote-1&quot;&gt;
    &lt;p class=&quot;mb-4&quot;&gt;Although it is not currently clear from the documentation, the Phoenix library will automatically check for trace-related headers on incoming REST requests and respect that data. This means you can start collecting distributed traces across multiple services. (You will have to supply those headers to outgoing requests, when necessary.) &lt;a href=&quot;#footnote-1-source&quot;&gt;Back&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;&lt;/ol&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Phoenix Static Assets in the Post-Webpack World</title>
    <link rel="alternate" href="https://aj-foster.com/2022/phoenix-assets-post-webpack/"/>
    <id>https://aj-foster.com/2022/phoenix-assets-post-webpack/</id>
    <updated>2022-03-25T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Creating a small package to help with copying static assets in a Phoenix application.</summary>
    <content type="html">&lt;p&gt;
Over the past few months, the Phoenix core team and the community around Phoenix have developed first-class support for &lt;a href=&quot;https://github.com/phoenixframework/esbuild/&quot;&gt;esbuild&lt;/a&gt; and &lt;a href=&quot;https://github.com/phoenixframework/tailwind&quot;&gt;Tailwind CSS&lt;/a&gt;. Both projects offer an alternative to Webpack, the project used to manage static assets since Phoenix 1.4.&lt;/p&gt;
&lt;p&gt;
You may remember the upgrade to Webpack from Brunch, another build tool used in earlier versions of Phoenix. In that case, projects moved between relatively similar tools (at least, from an outside perspective) that offered similar functionality relative to the needs of a Phoenix application. The change to esbuild and Tailwind CSS is a bit different, however: it requires moving from one unified tool that compiles, bundles, and moves assets, to a collection of tools that cover those needs in a patchwork fashion.&lt;/p&gt;
&lt;h2&gt;
What is Covered&lt;/h2&gt;
&lt;p&gt;
&lt;em&gt;(as of the time of writing)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Many of the common tasks related to static assets are covered in this new paradigm:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
esbuild handles compiling and bundling JavaScript (and related) assets    &lt;ul&gt;
      &lt;li&gt;
It can also bundle CSS, depending on your setup      &lt;/li&gt;
      &lt;li&gt;
I use it for code splitting (although the feature is experimental)      &lt;/li&gt;
      &lt;li&gt;
It will also copy any assets referenced in the JavaScript      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
Tailwind CSS works with a single CSS file out of the box    &lt;ul&gt;
      &lt;li&gt;
Using the &lt;code class=&quot;inline&quot;&gt;postcss-import&lt;/code&gt; plugin can extend this to bundling multiple CSS files, which is especially helpful if you need to import stylesheets from dependencies      &lt;/li&gt;
      &lt;li&gt;
It will also copy any assets referenced in the CSS      &lt;/li&gt;
      &lt;li&gt;
esbuild could help with bundling CSS if you invest in a multi-step build process      &lt;/li&gt;
      &lt;li&gt;
Both Tailwind and esbuild can minify the output      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
With careful configuration, these two standalone CLI tools can cover most use-cases.&lt;/p&gt;
&lt;h2&gt;
What isn’t Covered&lt;/h2&gt;
&lt;p&gt;
In one particular application I work on, there’s a need that wasn’t covered in this new way of working: &lt;strong&gt;copying static assets that aren’t CSS or JavaScript&lt;/strong&gt;. Images, favicons, &lt;code class=&quot;inline&quot;&gt;robots.txt&lt;/code&gt; — in this project, these assets still live in &lt;code class=&quot;inline&quot;&gt;assets/static/&lt;/code&gt;, and they need to end up in &lt;code class=&quot;inline&quot;&gt;priv/static/&lt;/code&gt; with the bundled JavaScript and CSS. But how do they get there?&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;strong&gt;Important Note&lt;/strong&gt;: The best answer for your application might be to just move these files to &lt;code class=&quot;inline&quot;&gt;priv/static/&lt;/code&gt;. That’s where they live in newly generated Phoenix applications. If you don’t have a reason for &lt;code class=&quot;inline&quot;&gt;priv/static/&lt;/code&gt; to be completely ignored by version control, consider this option.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
In this app, however, keeping files in &lt;code class=&quot;inline&quot;&gt;priv/static/&lt;/code&gt; isn’t the best idea. So something needs to get them there — continuously during development, and once during asset deployment.&lt;/p&gt;
&lt;h2&gt;
My Solution&lt;/h2&gt;
&lt;p&gt;
I tried to bend the Tailwind and esbuild standalone CLI tools to do the work for me. There are certainly situations in which this could work, depending on your setup. For me, it didn’t feel right to introduce additional imports in my JavaScript just for esbuild to include a file in its process. Similarly, it didn’t make sense to reference the assets in my CSS.&lt;/p&gt;
&lt;p&gt;
So, I made &lt;a href=&quot;https://github.com/aj-foster/phx_copy&quot;&gt;something to solve the problem&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Phoenix Copy&lt;/strong&gt; is a small Hex package that operates just like the esbuild and Tailwind standalone tools. Instead of running an external CLI command, however, it uses the &lt;code class=&quot;inline&quot;&gt;File&lt;/code&gt; module to manage files. It has two modes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
“Run once” to copy files during asset deployment, and  &lt;/li&gt;
  &lt;li&gt;
“Watch” to copy files continuously during development.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
My goal in building it was this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;# config/dev.exs

config :my_app, MyAppWeb.Endpoint,
  http: [port: 4000],
  # ...
  watchers: [
    asset_copy: {Phoenix.Copy, :watch, [:default]},
    esbuild: {Esbuild, :install_and_run, [:default, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:default, ~w(--watch)]}
  ]

# mix.exs

defp aliases do
  [
    &amp;quot;assets.deploy&amp;quot;: [
      &amp;quot;phx.copy default&amp;quot;,
      &amp;quot;esbuild default --minify&amp;quot;,
      &amp;quot;tailwind default --minify&amp;quot;,
      &amp;quot;phx.digest&amp;quot;
    ],
    # ...
  ]
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Whenever Phoenix calls upon esbuild or Tailwind to manage assets, it can also call upon Phoenix Copy to copy &lt;em&gt;everything else&lt;/em&gt; not otherwise covered.&lt;/p&gt;
&lt;h2&gt;
Construction&lt;/h2&gt;
&lt;p&gt;
Both of the Phoenix-specific esbuild and Tailwind packages use configuration &lt;strong&gt;profiles&lt;/strong&gt;. These allow you to have multiple, named configurations. I love this, because it doesn’t assume that your project has a single bundle of any given asset. I followed this pattern with Phoenix Copy as well: although my project only needs to move files from &lt;code class=&quot;inline&quot;&gt;assets/static/&lt;/code&gt; to &lt;code class=&quot;inline&quot;&gt;priv/static&lt;/code&gt;, others might need more.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;config :phoenix_copy,
  default: [
    source: Path.expand(&amp;quot;../assets/static/&amp;quot;, __DIR__),
    destination: Path.expand(&amp;quot;../priv/static/&amp;quot;, __DIR__)
  ]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
So far, the configuration is pretty simple: source and destination pairs. Using this information, the package offers two entrypoints:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
&lt;code class=&quot;inline&quot;&gt;run/1&lt;/code&gt;, which is used by &lt;code class=&quot;inline&quot;&gt;mix phx.copy&lt;/code&gt;, takes the name of a configuration profile and performs a one-time copy of all the files  &lt;/li&gt;
  &lt;li&gt;
&lt;code class=&quot;inline&quot;&gt;watch/1&lt;/code&gt; takes the name of a configuration profile, runs an initial copy of all files, and then watches for changes in the source directory (copying individual files as needed).  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
The watcher proved interesting to build, because the Phoenix Endpoint watcher configuration expects the function to block execution indefinitely. In Elixir we’re pretty comfortable spawning tasks and allowing them to run concurrently; spawning a file watcher and listening for messages &lt;strong&gt;without&lt;/strong&gt; a dedicated process is more interesting.&lt;/p&gt;
&lt;p&gt;
In early release candidates, the watcher module was a &lt;code class=&quot;inline&quot;&gt;GenServer&lt;/code&gt; that managed the file watcher process and listened to its messages. &lt;code class=&quot;inline&quot;&gt;watch/1&lt;/code&gt; would start and link this GenServer process in a task and call &lt;code class=&quot;inline&quot;&gt;Task.await(task, :infinity)&lt;/code&gt;. It wasn’t pretty, but it worked.&lt;/p&gt;
&lt;p&gt;
Of course, this setup proved hard to test. The indirection of (a) starting a process that (b) starts the file watcher made things slightly more complicated than necessary. &lt;em&gt;So&lt;/em&gt;, I thought, &lt;em&gt;let’s remove the middleman&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;
For the &lt;code class=&quot;inline&quot;&gt;0.1.0&lt;/code&gt; release, the watcher startup looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;def watch(source, destination) do
  Logger.info(&amp;quot;Starting Phoenix.Copy file watcher...&amp;quot;)
  {:ok, watcher_pid} = FileSystem.start_link(dirs: [source])
  FileSystem.subscribe(watcher_pid)

  handle_messages(source, destination, watcher_pid)
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
No more intermediate GenServer. Just start the filesystem watcher and then call &lt;code class=&quot;inline&quot;&gt;handle_messages/3&lt;/code&gt;, which looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;defp handle_messages(source, destination, watcher_pid) do
  receive do
    {:file_event, _watcher_pid, {path, events}} -&amp;gt;
      # Copy file...
      handle_messages(source, destination, watcher_pid)

    {:file_event, _watcher_pid, :stop} -&amp;gt;
      # Return, presumably towards the termination of this process.
      nil
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Manually calling &lt;code class=&quot;inline&quot;&gt;receive/1&lt;/code&gt; seems so rare in web applications, because we have amazing abstractions like the GenServer module. Sometimes, however — like when you need to block the execution of a calling process while listening for messages — it’s a great tool.&lt;/p&gt;
&lt;p&gt;
There are still troubles when it comes to testing, and plenty of edge cases I’ve yet to encounter. However, I’m satisfied with the project’s performance with my small sample size of one.&lt;/p&gt;
&lt;h2&gt;
Conclusion&lt;/h2&gt;
&lt;p&gt;
Phoenix, Elixir, Tailwind CSS, Alpine.js, and LiveView (PETAL) is an increasingly compelling story for developing real-time web applications. I’m delighted to see the Phoenix team embrace these new counterparts with first-class packages wrapping the esbuild and Tailwind CLI tools. For most projects, it’s all you need to have a comprehensive asset pipeline.&lt;/p&gt;
&lt;p&gt;
For my project, I needed a little more. &lt;a href=&quot;https://github.com/aj-foster/phx_copy&quot;&gt;Phoenix Copy&lt;/a&gt; isn’t for everyone, but it could help you.&lt;/p&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Migrating Data with Elixir</title>
    <link rel="alternate" href="https://aj-foster.com/2021/migrating-data/"/>
    <id>https://aj-foster.com/2021/migrating-data/</id>
    <updated>2021-12-18T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Migrating data to a new version of an application using Elixir.</summary>
    <content type="html">&lt;p&gt;
  Recently I completed a rewrite of an application&lt;sup&gt;&lt;a href=&quot;#footnote-1&quot; id=&quot;footnote-1-source&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, and needed to migrate the existing data. Below I&apos;ll review the process and discuss some important things I learned along the way.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
&lt;a href=&quot;#-setting-the-stage&quot;&gt;&lt;strong&gt;Setting the Stage&lt;/strong&gt;&lt;/a&gt;: background information about the application and the task at hand  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#-do-painful-things-more-often&quot;&gt;&lt;strong&gt;Do Painful Things More Often&lt;/strong&gt;&lt;/a&gt;: turning one-time data migration into a daily task    &lt;ul&gt;
      &lt;li&gt;
&lt;a href=&quot;#-migrator-overview&quot;&gt;&lt;strong&gt;Migrator Overview&lt;/strong&gt;&lt;/a&gt;: overall structure and setup of the migration application      &lt;/li&gt;
      &lt;li&gt;
&lt;a href=&quot;#-translating-ids&quot;&gt;&lt;strong&gt;Translating IDs&lt;/strong&gt;&lt;/a&gt;: maintaining foreign key integrity across different schemas      &lt;/li&gt;
      &lt;li&gt;
&lt;a href=&quot;#-execution&quot;&gt;&lt;strong&gt;Execution&lt;/strong&gt;&lt;/a&gt;: some notes on the actual implementation of the migration application      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#-persisting-id-translations&quot;&gt;&lt;strong&gt;Persisting ID Translations&lt;/strong&gt;&lt;/a&gt;: resolving a referential integrity issue outside the database    &lt;ul&gt;
      &lt;li&gt;
&lt;a href=&quot;#-stability-from-the-migration-logic&quot;&gt;&lt;strong&gt;Stability from the Migration Logic&lt;/strong&gt;&lt;/a&gt;: changing the migration code to support ID stability      &lt;/li&gt;
      &lt;li&gt;
&lt;a href=&quot;#-stability-from-crashes&quot;&gt;&lt;strong&gt;Stability from Crashes&lt;/strong&gt;&lt;/a&gt;: changing the translation cache storage to support ID stability      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#-migrating-files&quot;&gt;&lt;strong&gt;Migrating Files&lt;/strong&gt;&lt;/a&gt;: addressing the migration of file attachments  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Let’s get started.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h2&gt;
Setting the Stage&lt;/h2&gt;
&lt;p&gt;
My first programming-related job was part of a creative services team at a university. Student-funded groups, whose purposes ranged from volunteerism and fundraising to entertainment, needed graphic and web design services to attract students. To facilitate these services, the creative services team used an electronic queue.&lt;/p&gt;
&lt;p&gt;
This queue went through several iterations over the years. In 2014 I created my first iteration of the application with &lt;a href=&quot;https://github.com/aj-foster/CreativeQ&quot;&gt;CreativeQ&lt;/a&gt;, a Ruby on Rails app that taught me many valuable lessons about software design. As is often the case, while learning and adopting a new technology (Elixir), I was excited to try it out by rewriting the queue. This started in 2017 and took many years of occasional work.&lt;/p&gt;
&lt;p&gt;
Towards the end, I faced the task of migrating data from the old version. This was tricky for a few reasons:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
Data schemas were different. Even the types used for IDs changed for some tables.  &lt;/li&gt;
  &lt;li&gt;
Data had been normalized. A record from one table in the old database may translate into one (or more!) of several different tables in the new database.  &lt;/li&gt;
  &lt;li&gt;
Not everything resided in a database. Related files would be migrated from disk storage to S3-style object storage.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Starting from scratch with a new, empty database wasn’t an option, so it was time to figure out a migration strategy.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h2&gt;
Do Painful Things More Often&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&quot;https://martinfowler.com/bliki/FrequencyReducesDifficulty.html&quot;&gt;Martin Fowler wrote&lt;/a&gt; about a phrase we hear in the realm of software:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
If it hurts, do it more often.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Migrating data was going to be a painful task. I was dreading the process and how much downtime it might require. As the saying goes, this was a great time to consider what it might look like to perform data migrations more often.&lt;/p&gt;
&lt;p&gt;
In hindsight, this was already starting to happen: development of the new version required example data to validate whether the interactions made sense in the context of a real workflow (as opposed to all of the fake graphic and web requests I created over the years). Furthermore, users could benefit from being able to try the system early — with real data — and give feedback before the switch-over.&lt;/p&gt;
&lt;p&gt;
So I gave myself the following prompt: create a system to migrate data to the new version of the application &lt;strong&gt;every day&lt;/strong&gt;. This created a necessary and beneficial change in thinking. SQL queries and scripts weren’t going to be enough. I needed an application that could migrate data in an automated and repeatable way.&lt;/p&gt;
&lt;h3&gt;
Migrator Overview&lt;/h3&gt;
&lt;p&gt;
I created a basic &lt;code class=&quot;inline&quot;&gt;mix&lt;/code&gt; project to perform the migration. It only needs a few dependencies: Ecto (via &lt;code class=&quot;inline&quot;&gt;ecto_sql&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;postgrex&lt;/code&gt;) to read from the old PostgreSQL database and write to the new one.&lt;/p&gt;
&lt;p&gt;
The main application structure (&lt;code class=&quot;inline&quot;&gt;lib/&lt;/code&gt;) looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lib
├── migrator
│   ├── application.ex
│   ├── new
│   │   ├── schema1.ex
│   │   ├── schema2.ex
│   │   │   ├── schema2_embed1.ex
│   │   │   └── schema2_embed2.ex
│   │   ├── ...
│   │   └── schema3.ex
│   ├── new.ex
│   ├── old
│   │   ├── schema1.ex
│   │   ├── ...
│   │   └── schema2.ex
│   ├── old.ex
│   ├── timer.ex
│   └── translator.ex
└── migrator.ex&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Let’s break it down.&lt;/p&gt;
&lt;h4&gt;
“Contexts” and Schemas&lt;/h4&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;Migrator.New&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;Migrator.Old&lt;/code&gt; provide data access functions like you would find in a context module generated by Phoenix. For the old data, these functions only list records. For the new data, they only create, update, and truncate records. Beneath each of these modules are the Ecto schemas for each database table. Unlike in a working Phoenix application, these schemas read and write to each field as literally as possible. For example, here’s one of the schema modules for the &lt;strong&gt;new&lt;/strong&gt; data:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;defmodule Migrator.New.Group do
  use Ecto.Schema
  import Ecto.Changeset

  schema &amp;quot;groups&amp;quot; do
    field(:name, :string, default: &amp;quot;&amp;quot;)

    field(:inserted_at, :utc_datetime_usec)
    field(:updated_at, :utc_datetime_usec)
  end

  def changeset(%__MODULE__{} = group, attrs) do
    group
    |&amp;gt; cast(attrs, [:id, :name, :inserted_at, :updated_at])
    |&amp;gt; validate_required([:name, :inserted_at, :updated_at])
  end
end&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Notice there is no &lt;code class=&quot;inline&quot;&gt;timestamps/1&lt;/code&gt; call; instead, it manually specifies the &lt;code class=&quot;inline&quot;&gt;inserted_at&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;updated_at&lt;/code&gt; fields. This may seem like a trivial change, but it eliminates normally-helpful behavior on the part of Ecto that might overwrite the migrated data with automatically-generated timestamps. In other places, I’ve also replaced calls to &lt;code class=&quot;inline&quot;&gt;belongs_to&lt;/code&gt; and other associations with explicit &lt;code class=&quot;inline&quot;&gt;field&lt;/code&gt; calls, like &lt;code class=&quot;inline&quot;&gt;field(:group_id, :integer)&lt;/code&gt;. This gives the application full control over the data entering the database.&lt;/p&gt;
&lt;p&gt;
Schema modules for the old data don’t require changeset functions, only &lt;code class=&quot;inline&quot;&gt;schema&lt;/code&gt; and &lt;code class=&quot;inline&quot;&gt;field&lt;/code&gt; calls.&lt;/p&gt;
&lt;h4&gt;
Migrator&lt;/h4&gt;
&lt;p&gt;
The main &lt;code class=&quot;inline&quot;&gt;Migrator&lt;/code&gt; module contains the logic for moving data from old tables to new ones. The main &lt;code class=&quot;inline&quot;&gt;run&lt;/code&gt; function:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
Truncates data from the new tables, then  &lt;/li&gt;
  &lt;li&gt;
Lists all of the data from an old table, and  &lt;/li&gt;
  &lt;li&gt;
Creates or updates records in the new tables as appropriate.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Performing this logic at the Elixir level allows it to make transformations that wouldn’t be easy in SQL alone. For example, the application can read the contents of a comment and determine whether it represents a user-generated comment or a system-generated audit message. This module is rich in &lt;code class=&quot;inline&quot;&gt;case&lt;/code&gt; statements, with each branch ending in a call to &lt;code class=&quot;inline&quot;&gt;Repo.insert&lt;/code&gt; or &lt;code class=&quot;inline&quot;&gt;Repo.update&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
Timer&lt;/h4&gt;
&lt;p&gt;
Rather than use a third-party library like &lt;code class=&quot;inline&quot;&gt;quantum&lt;/code&gt;, I decided to create a simple GenServer process to schedule migrations daily. On startup, this GenServer schedules a migration for midnight UTC the next day. Following each run, it schedules another one for 24 hours later. It isn’t perfect, but it does the job.&lt;/p&gt;
&lt;h4&gt;
Translator&lt;/h4&gt;
&lt;p&gt;
The final module is &lt;code class=&quot;inline&quot;&gt;Migrator.Translator&lt;/code&gt;, which deserves its own section.&lt;/p&gt;
&lt;h3&gt;
Translating IDs&lt;/h3&gt;
&lt;p&gt;
While implementing the migration logic, trouble struck almost immediately. Requests for a graphic or web design — the main record in the system — had integer IDs in the old system and binary IDs in the new system. By default, simply copying data couldn’t ensure that all of the records referencing requests with a foreign key (e.g. comments with a &lt;code class=&quot;inline&quot;&gt;request_id&lt;/code&gt; column) would maintain their references.&lt;/p&gt;
&lt;p&gt;
In hindsight, it would have been perfectly reasonable to copy the old request IDs into a separate column in the new table. Later, a migration on the new database could change the foreign key relationships. But I wanted the migrator to &lt;em&gt;just handle it&lt;/em&gt;, and to avoid changing the new schema for the sake of the migration. So instead, there’s a translator.&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;Migrator.Translator&lt;/code&gt; is a simple GenServer that manages an &lt;a href=&quot;https://elixirschool.com/en/lessons/storage/ets&quot;&gt;Erlang Term Storage (ETS)&lt;/a&gt; table. It has functions like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;add_group(old_id, new_id)
get_group(old_id)
add_user(old_id, new_id)
get_user(old_id)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Hidden inside the module, the ETS table stores records like &lt;code class=&quot;inline&quot;&gt;{{:group, 2}, 10}&lt;/code&gt; (denoting that the old table’s group 2 is the new table’s group 10). When the migrator encounters a foreign key, it runs it through the translator before saving. &lt;code class=&quot;inline&quot;&gt;nil&lt;/code&gt; values naturally return &lt;code class=&quot;inline&quot;&gt;nil&lt;/code&gt;. In the end, referential integrity between tables is preserved.&lt;/p&gt;
&lt;h4&gt;
Asynchronicity&lt;/h4&gt;
&lt;p&gt;
Whenever you use a GenServer like this, you have to consider the impact of its sequential processing of messages on the data. For example, will it be possible for the migrator to ask for an ID from the table before the GenServer has processed the message to store that ID? Will the processing of messages be a bottleneck for the rest of the application?&lt;/p&gt;
&lt;p&gt;
In this case, since the migration “run” occurs sequentially in a single process, we don’t need to worry too much about what the translator is doing. Even if the migration process were to asynchronously &lt;code class=&quot;inline&quot;&gt;cast&lt;/code&gt; a large backlog of ID insertions to the translator, it will give the translator time to catch up by using &lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt; to retrieve IDs later on. Erlang guarantees messaging ordering between a given pair of processes, so the &lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt; message will definitely be handled after the &lt;code class=&quot;inline&quot;&gt;cast&lt;/code&gt; messages are finished.&lt;/p&gt;
&lt;p&gt;
What we &lt;strong&gt;should avoid&lt;/strong&gt;, however, is using &lt;code class=&quot;inline&quot;&gt;cast&lt;/code&gt; to insert ID pairings and then bypassing the GenServer altogether to retrieve data from the ETS table. While this is possible — with Erlang guaranteeing atomic reads and writes on the ETS table even with multiple processes reading — it could cause a situation where the migrator process reads data before the translator has written it.&lt;/p&gt;
&lt;p&gt;
The safest thing to do is use &lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt; everywhere. This does create a bottleneck: the migration process will only be able to create records as fast as the translator can insert and retrieve IDs from the ETS table. However, this creates a healthy back-pressure in the system. For a migration running daily, it doesn’t need to be incredibly fast. (In reality, working with the database will probably be the slowest part of the routine.) If using &lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt; guarantees that it won’t create a large backlog of messages for the translator, possibly causing a future &lt;code class=&quot;inline&quot;&gt;call&lt;/code&gt; to timeout, that’s an acceptable trade-off here.&lt;/p&gt;
&lt;h3&gt;
Execution&lt;/h3&gt;
&lt;p&gt;
  Getting started with the migrator was easy: create some schemas that match the exact structure of existing database tables. Throw some OTP at the problem with a few GenServers&lt;sup&gt;&lt;a href=&quot;#footnote-2&quot; id=&quot;footnote-2-source&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, and you&apos;re well on your way.&lt;/p&gt;
&lt;p&gt;
At nearly 600 lines of code, the migration logic was slightly more involved than anticipated for an application of the queue’s size and complexity. Performing the migration daily gave me the opportunity to refine the logic over an extended period of time. As folks continued to use the old version of the app in new and interesting ways, small tweaks to the migrator gradually improved the new experience.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h2&gt;
Persisting ID Translations&lt;/h2&gt;
&lt;p&gt;
As mentioned above, the migration application used an ETS table to maintain mappings from old to new IDs. The original goal was to retain referential integrity within the context of a single migration: comments of request #1 should have request #1’s new ID in their &lt;code class=&quot;inline&quot;&gt;request_id&lt;/code&gt; column on the other side. However, as the migration moved closer to the final rounds of testing, a new issue arose: how do we deal with files attached to requests?&lt;/p&gt;
&lt;p&gt;
In the process of completing a request, members of the creative services group may upload numerous drafts as attachments. Previously these files were stored on-disk where the application was hosted. The new version uses an S3-compatible object storage. Regardless of how the files get migrated (see &lt;strong&gt;Migrating Files&lt;/strong&gt; below), there was a problem: the randomly-generated binary request IDs were changing every day. Request IDs become part of the file’s path, so after 24 hours, all of the files would need to be moved. This wasn’t going to work.&lt;/p&gt;
&lt;p&gt;
Now, in addition to maintaining referential integrity within a single migration, the migrator needed to provide referential stability across runs. This required two changes.&lt;/p&gt;
&lt;h3&gt;
Stability from the Migration Logic&lt;/h3&gt;
&lt;p&gt;
The first issue to address was the migrator code itself. Because IDs were assumed to be unstable between runs, every new record was inserted with a &lt;code class=&quot;inline&quot;&gt;nil&lt;/code&gt; ID (allowing the database to sequence or generate an ID). Even if the translator already had an ID saved for that record from a previous run, the migrator would generate a new one and overwrite the cache.&lt;/p&gt;
&lt;p&gt;
Resolving this took a few steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
First, ensure every schema’s changeset function includes &lt;code class=&quot;inline&quot;&gt;:id&lt;/code&gt; in the list of fields given to &lt;code class=&quot;inline&quot;&gt;Ecto.Changeset.cast/4&lt;/code&gt;. Otherwise, the preset ID would be ignored.  &lt;/li&gt;
  &lt;li&gt;
Check for an existing ID translation before each record insertion. Using &lt;code class=&quot;inline&quot;&gt;nil&lt;/code&gt; as the default value works for new records.  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
It might also be a good practice (though not strictly necessary) to avoid re-inserting the same ID mapping in the translator.&lt;/p&gt;
&lt;h4&gt;
Resetting PostgreSQL Sequences&lt;/h4&gt;
&lt;p&gt;
Now that the migrator no longer relies on the database to generate primary keys for most records, I decided to reset the ID-generating sequences (for tables using integers as primary keys) after each migration. This way, there’s no chance of the database attempting to generate an ID that collides with an existing record.&lt;/p&gt;
&lt;p&gt;
Thanks to &lt;a href=&quot;https://stackoverflow.com/questions/244243/how-to-reset-postgres-primary-key-sequence-when-it-falls-out-of-sync&quot;&gt;the internet&lt;/a&gt;, I used the following (with the &lt;code class=&quot;inline&quot;&gt;groups&lt;/code&gt; table as an example):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;Migrator.New.Repo.query(
  &amp;quot;SELECT setval(&amp;#39;groups_id_seq&amp;#39;, COALESCE((SELECT MAX(id) + 1 FROM groups), 1), false);&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Tables with generated binary IDs have nothing to worry about.&lt;/p&gt;
&lt;h3&gt;
Stability from Crashes&lt;/h3&gt;
&lt;p&gt;
The ETS table storing the ID mappings was great, but it would be lost if the Erlang node (or even just the translator process) crashed for any reason. This included new deployments of the migrator code, in the absence of hot-code reloading.&lt;/p&gt;
&lt;p&gt;
My solution? Use DETS.&lt;/p&gt;
&lt;p&gt;
Disk-based Erlang Term Storage (DETS) looks a lot like ETS, except the underlying table is also saved to a file on disk. In my particular case, it was possible to save this file in such a way that it would persist between deployments of the migrator.&lt;/p&gt;
&lt;p&gt;
DETS looks deceptively simple to use:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;elixir&quot;&gt;# Replace...
table = :ets.new(:translation_cache, [:named_table])
# with...
{:ok, table} = :dets.open_file(:translation_cache, [{:file, &amp;#39;/path/to/translator.dets&amp;#39;}])

# Replace...
:ets.insert/2, :ets.lookup/2
# with...
:dets.insert/2, :dets.lookup/2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
(The &lt;code class=&quot;inline&quot;&gt;.dets&lt;/code&gt; extension is my own affectation.)&lt;/p&gt;
&lt;p&gt;
Of course, the details are a bit more involved, and anyone considering using DETS should read &lt;a href=&quot;https://www.erlang.org/doc/man/dets.html&quot;&gt;the documentation&lt;/a&gt; carefully. However, in this particular use-case, it worked.&lt;/p&gt;
&lt;p&gt;
With the code now looking for existing IDs before inserting records, and the data persisted to disk between deployments (and crashes) of the migrator, IDs became stable. Any given file could be moved to the S3-compatible storage just once.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h2&gt;
Migrating Files&lt;/h2&gt;
&lt;p&gt;
While the migration application handled PostgreSQL data nicely, migrating attached files from disk to S3 storage was another task. As part of this migration, the files were placed into a new folder structure as well (based on request IDs rather than comment IDs).&lt;/p&gt;
&lt;p&gt;
I won’t include many details of this part in this post, because they aren’t particularly interesting and they are so specific to the needs of the queue. However, let me plug this:&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Elixir’s &lt;a href=&quot;https://livebook.dev/&quot;&gt;Livebook&lt;/a&gt; is an amazing tool for facilitating routine tasks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
In a &lt;code class=&quot;inline&quot;&gt;.livemd&lt;/code&gt; file, I now have detailed instructions and code snippets that walk me through the process of downloading CSV files with ID translations and structuring my filesystem properly. Then the executable code blocks read in the CSVs (thanks to &lt;code class=&quot;inline&quot;&gt;nimble_csv&lt;/code&gt;), move the files appropriately, and prepare them for syncing to S3-like storage. There’s no need to rely on my memory between instances of moving files. Livebook makes the process as repeatable as possible.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h2&gt;
Conclusion&lt;/h2&gt;
&lt;p&gt;
Migrating data from the old version of the queue to the new version was a painful task, so I chose to do it more often. A small Ecto-based Elixir application handled the PostgreSQL data with referential integrity and stability. A Livebook file guided me through the migration of files from one storage to another. Beta testers saw up-to-date data every day, and up-to-date files with much less effort.&lt;/p&gt;
&lt;p&gt;
This project reinforces the idea that Elixir is a fantastic “glue” language. Whether it is coordinating runs of a purpose-built binary, managing external services or hardware, or migrating data between systems, Elixir can help. It has the right abstractions to both give you control and get out of your way.&lt;/p&gt;
&lt;p&gt;
As a result, migrating data doesn’t hurt anymore.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;ol class=&quot;my-8&quot;&gt;
    &lt;li id=&quot;footnote-1&quot;&gt;
    &lt;p class=&quot;mb-4&quot;&gt;Consider this a +1 to the sentiment that rewriting an application from scratch &lt;strong&gt;(a)&lt;/strong&gt; sounds better than it is, &lt;strong&gt;(b)&lt;/strong&gt; takes longer than expected, and &lt;strong&gt;(c)&lt;/strong&gt; leaves existing users of the application dissatisfied while the rewrite occurs. &lt;a href=&quot;#footnote-1-source&quot;&gt;Back&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li id=&quot;footnote-2&quot;&gt;
    &lt;p class=&quot;mb-4&quot;&gt;Using a GenServer (or more generally, spawning a new process) is not the best solution for everything. But it is an awfully quick solution for many things. &lt;a href=&quot;#footnote-2-source&quot;&gt;Back&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;&lt;/ol&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Absinthe and Apollo in Swift</title>
    <link rel="alternate" href="https://aj-foster.com/2021/absinthe-apollo-swift/"/>
    <id>https://aj-foster.com/2021/absinthe-apollo-swift/</id>
    <updated>2021-02-23T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Apollo in Swift, Absinthe in Elixir, sending GraphQL over websockets.</summary>
    <content type="html">&lt;p&gt;
&lt;a href=&quot;https://github.com/absinthe-graphql/absinthe&quot;&gt;Absinthe&lt;/a&gt; is a GraphQL server for the Elixir language, which interacts nicely with the &lt;a href=&quot;https://phoenixframework.org/&quot;&gt;Phoenix&lt;/a&gt; web framework to serve GraphQL queries over HTTP and websockets. I’ve used Absinthe in my paid work, and recently started using it for a side project where subscriptions will be very helpful. If you aren’t familiar, GraphQL subscriptions allow you to ask the server to send updates when certain things happen, rather than repeatedly asking for updates.&lt;/p&gt;
&lt;p&gt;
This time, however, the consumer of the API isn’t a JavaScript web app, but a native application written in Swift. So the full stack is:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Absinthe, the GraphQL server  &lt;/li&gt;
  &lt;li&gt;
Phoenix channels, an abstraction on top of websockets  &lt;/li&gt;
  &lt;li&gt;
Websockets, the transport mechanism  &lt;/li&gt;
  &lt;li&gt;
Swift application, the client  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Apollo — a project that provides a GraphQL client (and server) for JavaScript — has a &lt;a href=&quot;https://github.com/apollographql/apollo-ios&quot;&gt;client library&lt;/a&gt; for Swift applications. Unfortunately, it doesn’t work out of the box with Phoenix channels. Channels need to be joined, and Absinthe uses channels to communicate subscription data in a particular way. For JavaScript clients, the Absinthe folks provide &lt;a href=&quot;https://github.com/absinthe-graphql/absinthe-socket&quot;&gt;a library&lt;/a&gt; that adapts Apollo’s communication to work with Absinthe over Channels. However, no such thing exists for the Swift client.&lt;/p&gt;
&lt;p&gt;
So I decided &lt;a href=&quot;https://github.com/aj-foster/absinthe-socket-transport&quot;&gt;to make one&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Introducing Absinthe Socket Transport&lt;/h2&gt;
&lt;p&gt;
The Apollo client for Swift, much like the JavaScript client, has a pluggable transport system. Without changing your query-related code, you can send operations over HTTP or websockets (or a mixture of the two) just by switching which &lt;code class=&quot;inline&quot;&gt;NetworkTransport&lt;/code&gt; you use when initializing the client. There are two base transports available out of the box: an HTTP transport, and an Apollo-compatible websocket transport.&lt;/p&gt;
&lt;p&gt;
To make this work, we need a new &lt;code class=&quot;inline&quot;&gt;NetworkTransport&lt;/code&gt; implementation that would operate on a Phoenix channel. There’s only one problem: I’m not an expert at Swift. Still, challenge accepted.&lt;/p&gt;
&lt;p&gt;
My first solution is based on what was already available:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Apollo’s &lt;code class=&quot;inline&quot;&gt;WebSocketTransport&lt;/code&gt; class that implements the &lt;code class=&quot;inline&quot;&gt;NetworkTransport&lt;/code&gt; protocol  &lt;/li&gt;
  &lt;li&gt;
The &lt;code class=&quot;inline&quot;&gt;SwiftPhoenixClient&lt;/code&gt; &lt;a href=&quot;https://github.com/davidstump/SwiftPhoenixClient&quot;&gt;library&lt;/a&gt; that implements communication over Phoenix channels  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Development started with putting the Apollo class and its dependencies on one side of the screen, and slowly rewriting it on the other side of the screen using &lt;code class=&quot;inline&quot;&gt;SwiftPhoenixClient&lt;/code&gt;. Along the way, I learned a lot about how Absinthe and Phoenix communicate.&lt;/p&gt;
&lt;h3&gt;
Welcome to Object-oriented Land (again)&lt;/h3&gt;
&lt;p&gt;
Frankly, it had been a while since writing object-oriented code. Elixir’s functional nature has spoiled me recently, and we use exclusively functional components when working in React at work. Getting back into the groove took some careful thought.&lt;/p&gt;
&lt;p&gt;
Realizing that the &lt;code class=&quot;inline&quot;&gt;NetworkTransport&lt;/code&gt; protocol involves implementing a single function &lt;code class=&quot;inline&quot;&gt;send&lt;/code&gt; was simple enough. I &lt;strong&gt;really&lt;/strong&gt; like that protocols can be implemented via extensions in Swift, so instead of…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;public class AbsintheSocketTransport: NetworkTransport {
  // Everything for the class
  // Then implement send()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
We can have…&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;swift&quot;&gt;public class AbsintheSocketTransport {
  // Everything for the class
}

extension AbsintheSocketTransport: NetworkTransport {
  // Implement send()
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The extension can use private functions on the class, too. Although the first release fo the package has rather messy code in the extension, I’m really glad that it could be separated out.&lt;/p&gt;
&lt;p&gt;
Getting back to chaining methods instead of piping functions was an adjustment, but luckily the &lt;code class=&quot;inline&quot;&gt;SwiftPhoenixClient&lt;/code&gt; makes it easy with its return values. There is a nice consistency between having a function return a modified version of its first argument and having a method return the original object.&lt;/p&gt;
&lt;h3&gt;
Welcome to Thread Land (again)&lt;/h3&gt;
&lt;p&gt;
The isolated processes in the Erlang runtime are really nice. Having data always copied between processes, and not having to worry about &lt;em&gt;retain cycles&lt;/em&gt;, means I had a mental adjustment to make.&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;SwiftPhoenixLibrary&lt;/code&gt; offers two variants of many of its methods: one where you manage your own retain cycles, and one where they manage it for you. The existence of these options was important to remind me to be careful. I found it nice to begin with the “we’ll do it for you” variants and transition to the self-managed ones as time went on. There’s probably something wrong with my implementation, but it’s a start.&lt;/p&gt;
&lt;p&gt;
I’ll always wonder about the self-talk implications of typing &lt;code class=&quot;inline&quot;&gt;[weak self]&lt;/code&gt; so much.&lt;/p&gt;
&lt;h3&gt;
Creating a Swift Package&lt;/h3&gt;
&lt;p&gt;
It seems like there are several ways to manage packages in Swift. I’m unfamiliar with the community trends, but it seems like &lt;em&gt;Swift Package Manager&lt;/em&gt; is the newest and most well-supported within Xcode. The documentation for creating a package is friendly enough, but it took some trial and error to get the main manifest right. Hopefully it isn’t offensive not to immediately support the other package managers.&lt;/p&gt;
&lt;p&gt;
Using the package locally was not altogether fun. Xcode and Swift Package Manager support referencing a local copy of the package, but you still have to commit and refresh the dependency to use any changes. Luckily most of the code was originally written within the project where it was needed before creating a separate package. In the future I would love to investigate this more.&lt;/p&gt;
&lt;p&gt;
Also, the package doesn’t have any tests. That’s a lesson for another day.&lt;/p&gt;
&lt;h2&gt;
Broader Perspective&lt;/h2&gt;
&lt;p&gt;
Elixir as a language is basically complete, according to its creator. I would agree; the fact that he was recently able to bring Elixir to the realm of high-performance &lt;a href=&quot;https://github.com/elixir-nx/nx&quot;&gt;numerical computing&lt;/a&gt; using a &lt;strong&gt;library&lt;/strong&gt; rather than modifications to the core language is a huge testament to its extensibility.&lt;/p&gt;
&lt;p&gt;
So what’s left to build? Stuff like this. We’ve laid the groundwork for an incredible platform, and now it’s time to go back and fill in the little holes. How Elixir and its widely-adopted libraries interact with other languages is a great place to focus.&lt;/p&gt;
&lt;p&gt;
I don’t expect anyone to use &lt;a href=&quot;https://github.com/aj-foster/absinthe-socket-transport&quot;&gt;Absinthe Socket Transport&lt;/a&gt;, but it’s there if you need it.&lt;/p&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Writing Commit Messages in Atom</title>
    <link rel="alternate" href="https://aj-foster.com/2016/git-commit-atom/"/>
    <id>https://aj-foster.com/2016/git-commit-atom/</id>
    <updated>2016-06-15T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>A better way to use Atom as your Git commit message editor.</summary>
    <content type="html">&lt;p&gt;
&lt;strong&gt;Edit (8-14-2016)&lt;/strong&gt;: The previous version of the Init Script for Atom did not handle file paths with spaces in them. A simple replacement (space =&amp;gt; backslash space) does the trick.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Edit (3-27-2017)&lt;/strong&gt;: &lt;a href=&quot;https://mmore500.github.io/&quot;&gt;Matthew Moreno&lt;/a&gt; has created an &lt;a href=&quot;https://atom.io/packages/git-edit-atom&quot;&gt;Atom package&lt;/a&gt; and corresponding &lt;a href=&quot;https://github.com/mmore500/git-commit-atom&quot;&gt;Golang package&lt;/a&gt; to set this up for you. It has the benefit of handling other types of Git files (like tag messages, rebase manifests, etc.). Definitely check it out!&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;p&gt;
If you’re into writing good commit message for your Git repositories, you probably use the &lt;code class=&quot;inline&quot;&gt;--verbose&lt;/code&gt; flag with &lt;code class=&quot;inline&quot;&gt;git commit&lt;/code&gt;. This includes the changes to be committed right in the editor where you write your commit messages, for easy review.&lt;/p&gt;
&lt;p&gt;
For a long time I’ve just used &lt;code class=&quot;inline&quot;&gt;nano&lt;/code&gt; as my commit message editor. This was “good enough” in that it allowed me to edit the message quickly while scrolling through the changes. (Side note: when Mac’s Terminal started translating mouse scrolling to console scrolling, this got much easier.) Recently, however, I felt it was time for an upgrade. Given that &lt;a href=&quot;https://atom.io&quot;&gt;Atom&lt;/a&gt; is my editor of choice at the moment, it made sense to use it for editing commit messages.&lt;/p&gt;
&lt;p&gt;
Enter trouble.&lt;/p&gt;
&lt;p&gt;
A quick search may lead you to some &lt;a href=&quot;http://blog.atom.io/2014/03/13/git-integration.html#commit-editor&quot;&gt;deceptively simple instructions&lt;/a&gt; on how to use Atom to write commit messages. If you’ve tried it out, you’ve probably found that the user experience isn’t that great. When you run &lt;code class=&quot;inline&quot;&gt;git commit&lt;/code&gt;, it passes the commit message file location to &lt;code class=&quot;inline&quot;&gt;atom --wait&lt;/code&gt;. Here, a new Atom instance takes charge. Even if an Atom window is already open, a new one is created just for the commit message. Git has to wait for that new window to be closed (not just the tab / editor with the commit message) before it can continue. The entire process takes longer than it needs to.&lt;/p&gt;
&lt;p&gt;
Git requires the editor to wait and report a return value for several reasons: it gives the editor an opportunity to abort the commit if something goes wrong; it gives us an opportunity to save the commit message several times before deciding we’re finished. Unfortunately Atom does not have the ability to wait on a single tab / text editor, so a new window must be devoted to the task.&lt;/p&gt;
&lt;h3&gt;
A Solution&lt;/h3&gt;
&lt;p&gt;
To stop this annoying dance of new windows, I wrote some code. You should &lt;strong&gt;use it at your own risk&lt;/strong&gt; (Unix / Bash-friendly environments only) and let me know if you have any suggestions for improvement. The goal is to replace &lt;code class=&quot;inline&quot;&gt;atom --wait&lt;/code&gt; with just plain &lt;code class=&quot;inline&quot;&gt;atom&lt;/code&gt; to open the commit message file, so it opens quickly in an existing window. We only use the &lt;code class=&quot;inline&quot;&gt;--wait&lt;/code&gt; flag because Git needs to be told (in this case, by Atom) when you’ve finished editing the commit message. By putting another process between Git and Atom, we can remove this necessity.&lt;/p&gt;
&lt;p&gt;
It’s all based on the following script, which you would put some place safe (that won’t move):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #75715e&quot;&gt;#!/bin/bash&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# Get the location of the file to edit from Git.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;FILE_TO_EDIT&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$1&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# If the file we&apos;re editing is a commit message, we can assume Atom is set up&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# to insert the magic token when the editor closes. Otherwise, we need to let&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# Atom tell Git when it is done.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;#&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;if&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;[[&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;$(&lt;/span&gt;basename &lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$FILE_TO_EDIT&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;)&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;==&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;COMMIT_EDITMSG&quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;]]&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;then&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;# Tell Atom to open the file in an existing window.&lt;/span&gt;&amp;#32;
  atom &lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$FILE_TO_EDIT&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;
  &amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;# Wait for Atom to write the magic marker - ##ATOM EDIT COMPLETE## - to signal&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;# that the editor has been closed.&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;#&lt;/span&gt;&amp;#32;
  tail -f &lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$FILE_TO_EDIT&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;|&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;while&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;read&lt;/span&gt; LOGLINE
  &lt;span style=&quot;color: #66d9ef&quot;&gt;do&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #f92672&quot;&gt;[[&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$LOGLINE&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;==&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;##ATOM EDIT COMPLETE##&quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;]]&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; pkill -P &lt;span style=&quot;color: #f8f8f2&quot;&gt;$$&lt;/span&gt; tail
  &lt;span style=&quot;color: #66d9ef&quot;&gt;done&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;else&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;# Tell Atom to open the file in a new window and report when it is finished.&lt;/span&gt;&amp;#32;
  atom --wait &lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;$FILE_TO_EDIT&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
For now, let’s pretend that script is located in &lt;code class=&quot;inline&quot;&gt;/usr/local/bin/git-commit-atom.sh&lt;/code&gt;. You’ll need to make sure the script is executable by using &lt;code class=&quot;inline&quot;&gt;chmod +x /usr/local/bin/git-commit-atom.sh&lt;/code&gt; By setting this script as our editor, Git will interact with it instead of Atom directly. Before we do that, however, we need Atom to write a magic token to the end of the commit message when we’ve finished editing it. To do that, insert this into your Atom Init Script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #75715e&quot;&gt;# This writes a magic token to the end of a commit message. We expect this to&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# be run when the commit message editor has been closed.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;#&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;commit_msg_notifier = &lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;(path) -&amp;gt;&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #f8f8f2&quot;&gt;process = &lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;require&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;child_process&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #a6e22e&quot;&gt;process&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;exec&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;echo \&quot;##ATOM EDIT COMPLETE##\&quot; &amp;gt;&amp;gt; &quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;+&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #a6e22e&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;replace&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #960050; background-color: #1e0010&quot;&gt;\&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;s&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;/&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;g&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;\\$1&apos;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# The following looks at all new editors. If the editor is for a COMMIT_EDITMSG&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# file, it sets up a callback for a magic token to be written when the editor&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# is closed.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;#&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;setup_commit_msg_notifier = &lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;(editor) -&amp;gt;&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #66d9ef&quot;&gt;if&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #a6e22e&quot;&gt;editor&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;buffer&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;?&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;getBaseName&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;()&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;==&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;COMMIT_EDITMSG&quot;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #f8f8f2&quot;&gt;path = &lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;editor&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;buffer&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;file&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;getPath&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;()&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #a6e22e&quot;&gt;editor&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;onDidDestroy&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #a6e22e&quot;&gt;-&amp;gt;&lt;/span&gt;&amp;#32;
      &lt;span style=&quot;color: #a6e22e&quot;&gt;commit_msg_notifier&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;path&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
&amp;#32;
  &lt;span style=&quot;color: #75715e&quot;&gt;# Return this, else weird things may happen. Anyone understand why?&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# Set up for all editors to be screened for commit messages.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #a6e22e&quot;&gt;atom&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;workspace&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;observeTextEditors&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;(&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;setup_commit_msg_notifier&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
After reloading Atom (restart the application or use View &amp;gt; Developer &amp;gt; Reload Window) we should be ready to try it out. Use this to try it out on one git repo:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;git config core.editor &amp;quot;/usr/local/bin/git-commit-atom.sh&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
And use this to set it for all of your projects:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;git config --global core.editor &amp;quot;/usr/local/bin/git-commit-atom.sh&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;
Now, when you use &lt;code class=&quot;inline&quot;&gt;git commit&lt;/code&gt;, the commit message should open in your most recently active Atom window. Atom will write a token at the end of the commit message file, and the managing script will tell Git when you’re finished writing.&lt;/p&gt;
&lt;p&gt;
How does it work for you? Feel free to tweet or message me with feedback; it’s appreciated.&lt;/p&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Tombstones in Typography</title>
    <link rel="alternate" href="https://aj-foster.com/2015/tombstone/"/>
    <id>https://aj-foster.com/2015/tombstone/</id>
    <updated>2015-11-20T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Thoughts and examples of using the tombstone in typography on the web.</summary>
    <content type="html">&lt;p&gt;
If you search for information on this topic, you’re likely to get a bunch of articles on the typography found on tombstones (a very interesting topic). So just to be clear: this article concerns the typographic symbol called the &lt;em&gt;tombstone&lt;/em&gt;, which is used to mark the end of various written pieces.&lt;/p&gt;
&lt;h3&gt;
A little history&lt;/h3&gt;
&lt;p&gt;
Although many people (myself included) know the tombstone from mathematics as the “end of proof” or “Q.E.D.” symbol, it was first used to mark the end of articles in magazines and other written contexts. As &lt;a href=&quot;https://en.wikipedia.org/wiki/Tombstone_%28typography%29&quot;&gt;a quick search&lt;/a&gt; will point out, the symbol might also be called the &lt;em&gt;Halmos&lt;/em&gt; after the individual who apparently introduced it to mathematics.&lt;/p&gt;
&lt;p&gt;
It appears the tombstone has only partially made the transition into web publications. A quick survey of the &lt;a href=&quot;http://www.journalism.org/media-indicators/digital-top-50-online-news-entities-2015/&quot;&gt;top 50&lt;/a&gt; online news sites (for this, ad blocking software is recommended) reveals that almost nobody uses it, with the exception of a round red dot from the UK publisher &lt;a href=&quot;http://www.independent.co.uk&quot;&gt;The Independent&lt;/a&gt; and the company logo from &lt;a href=&quot;http://www.nbcnews.com/&quot;&gt;NBC News&lt;/a&gt;. Most others simply end an article with a copyright remark or our dear friend, the comment section. &lt;em&gt;(If you see the tombstone or another similar end-mark in use, I’d love to add examples at the end of this article.)&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
Evaluating its purpose&lt;/h3&gt;
&lt;p&gt;
In any case, such a symbol serves to separate the main content from whatever may follow, whether it be another article, an editorial remark, or - let’s be honest - an advertisement. It’s easy to see why this proved useful in the context of a magazine, which may have text displaced all throughout the page due to images and the like. Seeing a small box at the end of the paragraph alerted the reader that something new awaited them on the next page.&lt;/p&gt;
&lt;p&gt;
I’d argue this remains important on the web. With advertisements looking increasingly like other content, and last year’s trend of infinitely scrolling news stories, it can be difficult to pinpoint where the main content ends. Perhaps this is good for publishers who wish to present advertisements, but it places a small mental tax on readers.&lt;/p&gt;
&lt;h3&gt;
Implementing it&lt;/h3&gt;
&lt;p&gt;
Let’s first take a look at how The Independent and NBC News implement their marks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #75715e&quot;&gt;/* Styles taken from http://www.independent.co.uk */&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;full-article&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;text-wrapper&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;last-of-type&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;after&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;{&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;background&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;#EC1A2E&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;none&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;repeat&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;scroll&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;%&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;%&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;border-radius&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;8&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;content&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;display&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;inline-block&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;left&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;6&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;position&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;relative&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;top&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;16&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;}&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;/* Styles taken from http://www.nbcnews.com */&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;article-body&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;last-child&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;after&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;{&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;background-image&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;url(&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;...&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;);&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;background-repeat&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;no-repeat&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;background-size&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;18&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;auto&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;bottom&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;-8&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;content&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;display&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;inline-block&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;18&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;position&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;relative&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;18&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Between these two, I prefer &lt;code class=&quot;inline&quot;&gt;p:last-of-type&lt;/code&gt; to &lt;code class=&quot;inline&quot;&gt;p:last-child&lt;/code&gt; since it allows writers to put non-textual content afterwards with no issue. NBC’s logo simply doesn’t show if the article ends with a photo or blockquote.&lt;/p&gt;
&lt;p&gt;
Based on these, and my own requirements / opinions, I’ve settled upon this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;article&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;p&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;last-of-type&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #a6e22e&quot;&gt;after&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;{&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;border&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;px&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;solid&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;currentColor&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;content&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;display&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;block&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;float&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;right&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;position&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;relative&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
&amp;#32;
    &lt;span style=&quot;color: #75715e&quot;&gt;/* To be changed based on typeface */&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;height&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0.625&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;em&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;margin-left&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0.3&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;em&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;top&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0.3&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;em&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;width&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;:&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0.625&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;em&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Of course, there is a UTF character for the tombstone (&lt;code class=&quot;inline&quot;&gt;&amp;amp;#8718;&lt;/code&gt;). Unfortunately it suffers from wild variation by typeface - and I simply don’t like the way it looks in most. Thus I’ve chosen to use a square box, about the cap height of the body typeface, similar to what is produced by LaTeX for mathematical documents. You might prefer the box to be filled in, which is quite common. Everything is relative and ought to adjust well with changes in the &lt;code class=&quot;inline&quot;&gt;font-size&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;
Also, I like to have the tombstone right-justified, especially if the paragraph text itself is justified. This follows partly from its use in LaTeX documents, and partly from my own preferences.&lt;/p&gt;
&lt;p&gt;
Here’s a CodePen example annotated with my style suggestions, if you’d like to try it out:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;result&quot; data-user=&quot;aj-foster&quot; data-slug-hash=&quot;KdYgjd&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Tombstone&quot;&gt;
    &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/aj-foster/pen/KdYgjd/&quot;&gt;
  Tombstone&lt;/a&gt; by AJ Foster (&lt;a href=&quot;https://codepen.io/aj-foster&quot;&gt;@aj-foster&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;script async=&quot;async&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;
&lt;/script&gt;
&lt;br&gt;
&lt;p&gt;
If you use or see the tombstone on the web, I’d love to hear about it. Happy writing!&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;div class=&quot;addendum&quot;&gt;
      &lt;p&gt;Additions &amp;amp; Errata&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;(11/22/2015) &lt;a href=&quot;https://twitter.com/johndjameson&quot;&gt;John D. Jameson&lt;/a&gt; pointed out that &lt;a href=&quot;http://www.clickhole.com/&quot;&gt;ClickHole&lt;/a&gt; uses a circular mark at the end of articles on their site.&lt;/li&gt;
        &lt;li&gt;(1/10/2019) Marc Müller mentioned that &lt;a href=&quot;https://blog.google/products/android/introducing-new-google-fit/&quot;&gt;a recent Google Blog post&lt;/a&gt; used a mark with class &quot;tombstone.&quot;&lt;/li&gt;
    &lt;/ul&gt;&lt;/div&gt;
</content>
  </entry>

  
  
  <entry>
    <title>End of the old FTA</title>
    <link rel="alternate" href="https://aj-foster.com/2015/ftc-changes/"/>
    <id>https://aj-foster.com/2015/ftc-changes/</id>
    <updated>2015-09-12T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Reflection on my volunteer role as the FIRST Tech Challenge changes.</summary>
    <content type="html">&lt;h3&gt;
A new season&lt;/h3&gt;
&lt;p&gt;
Today (September 12, 2015) marks the start of the 2015 &lt;a href=&quot;http://www.usfirst.org/roboticsprograms/ftc&quot;&gt;FIRST Tech Challenge&lt;/a&gt; season. Every year brings a different challenge for students to solve, and every few years the systems enabling them to accomplish that challenge get an upgrade. This year the robot control system is moving away from a LEGO-made microcontroller to an Android-based setup. Instead of mounting a LEGO NXT brick on their robots, students will be mounting a phone.&lt;/p&gt;
&lt;p&gt;
This change isn’t suprising, considering the processing power and relatively low expense of smartphones. Students will program their robots in Java instead of a special brand of C++, and they will interact with Android apps instead of proprietary firmware. As someone interested in the advancement of FTC and robotics education in general, I love the new setup.&lt;/p&gt;
&lt;h3&gt;
A look back&lt;/h3&gt;
&lt;p&gt;
In November 2008, FIRST Tech Challenge teams used a Bluetooth connection between their own laptops and the robot in order to control them. Beside the field you’d see carts and trays holding laptops with joystick controllers attached. The deficiencies of the system were notable; Bluetooth connections were unreliable, mispairings would occur, and teams had to start their robots manually along with the official timer. The technology being used too often affected the outcome of the matches.&lt;/p&gt;
&lt;p&gt;
My high school hosted a competition in November 2008, but we were trying something different. As the first competition of the 2008 season (in the world), we were selected to beta-test a new wireless system. It was called the Samantha module (apparently named after the daughter of its creator) and it allowed the robots to connect wirelessly with a field router. The playing field was alive; it started and stopped the robots simultaneously, transmitted joystick data from USB hubs attached to the structure, and reported information about the robots to an operator. Everything was controlled by a single computer. At the helm for that first live test? Me.&lt;/p&gt;
&lt;p&gt;
In November 2008, as an energetic young freshman in high school, I volunteered as the Field Control System (FCS) Operator. My training came in the form of a kind and quiet affiliate partner whom I met setting up the competition field. He walked me through the software, its quirks, and what to do if everything went horribly wrong. He talked about the known issues and the failure cases. He treated me as a volunteer, and not just a rogue student.&lt;/p&gt;
&lt;p&gt;
Most of that day was forgettably smooth. We reported a bug and noted a few matches where weird things happened. The software was a work in progress, so it was to be expected. As a result of the hard work of its creators and that test run, the Samantha module became a staple of FTC teams from 2009-2014.&lt;/p&gt;
&lt;p&gt;
From 2008-2012 I would continue volunteering instead of participating in FTC. My experience during that first competition was more interesting and compelling than participating on my school’s FTC team - plus, the team was involved in other robotics competitions besides FTC. Each time, the affiliate partner or one of two main Field Technical Advisors for the state would update me on changes to the software, known issues with the field, or whatever else had come up. Despite seeing each other only periodically, I considered these people mentors.&lt;/p&gt;
&lt;p&gt;
In 2012 it was recommended that I try out some new roles. Being an FCS Operator can be difficult because of the constant amount of attention it takes - there is almost always something to do or keep an eye on. After four years I had also exhausted the amount of exposure to “how things work” that could be gained by sitting behind the controls. In concert with my move to college, I began working as a Field Technical Advisor’s Assistant.&lt;/p&gt;
&lt;h3&gt;
If you need help, wave at me&lt;/h3&gt;
&lt;p&gt;
The Field Technical Advisor had quite a few roles. Field setup and takedown was one, because the electronics were nontrivial to deal with. During the day, FTAs watched the matches with an intensity rivaled only by the referees. Should a robot suddenly stop moving or lose control, the FTA’s job was to triage the problem from the safety of the field’s walls and do anything possible to keep the game going. In the event of a failure of the field, the FTA would advise the referees that the match should be replayed. Most importantly, when a robot failed, the FTA would try to explain to the team why.&lt;/p&gt;
&lt;p&gt;
As an assistant, I assisted and learned. Every time something went wrong, a lead FTA would explain to the team what happened, and explain to me why. Eventually I started talking to teams more and occasionally holding the title of FTA myself. The FTAs in the Orlando area got to know one another quite well, and we all had a good time supporting one another. News of a particularly bad tournament (one had inconsistent power, and the brownouts wreaked havoc with the field system) or an interesting pattern of issues would get around between us. We collectively fought a battle against the NXT lockup issue for years, wherein the LEGO NXT brick would freeze in a seemingly random fashion. (It turned out to be an issue with electrostatic discharge, a diagnosis that proved elusive because such factors as ambient humidity and length of cords were strong factors.)&lt;/p&gt;
&lt;p&gt;
We grew with FTC. The number of teams in the state/nation/world increased without bound. The speed with which we could diagnose issues and articulate them to teams improved. I got to see teams cautiously move at the start of the season and valiantly charge at the state championship.&lt;/p&gt;
&lt;h3&gt;
Moving on&lt;/h3&gt;
&lt;p&gt;
With the new system, the FTA is no longer concerned with any field systems. Students once again hold joysticks, this time connected to an Android phone in their coach’s hand. Their phone talks to another phone on the robot, and there is no middleman to keep an eye on. We still care about the physical aspects of the field - it turns out that robots can cause damage - but the wireless connections, control, and all information about the systems, is left quite literally in the hands of the teams.&lt;/p&gt;
&lt;p&gt;
I spoke today with the (now retired) affiliate partner who encouraged me to check out the FTA position several years ago. We both expressed some regret that we would no longer have our previously presecribed duties (he would often act as an FTA because of his detailed knowledge of the systems). However, the lack of a field system gives us the opportunity to go to teams directly. We can spend more time walking around, answering questions, and diagnosing individual issues. We can sit and watch a match. Our flashlights need not be at the ready so much anymore, and we’re less likely to be reaching into the field to shut down a dangerously malfunctioning robot.&lt;/p&gt;
&lt;p&gt;
I look forward to that role: more advice, less triage. The change was inevitable; luckily, the new system is a great deal of progress as well.&lt;/p&gt;
&lt;div style=&quot;font-size: 12px; font-style: italic; margin-top: 2rem&quot;&gt;
  &lt;p&gt;FIRST, FIRST Tech Challenge (FTC), LEGO, NXT, Android, Bluetooth, and Samantha are probably all trademarks of some entity that isn&apos;t me. The views expressed here are my own, and don&apos;t represent those of FIRST.&lt;/p&gt;&lt;/div&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Using Other Lanugages in Ruby</title>
    <link rel="alternate" href="https://aj-foster.com/2015/ruby-bindings/"/>
    <id>https://aj-foster.com/2015/ruby-bindings/</id>
    <updated>2015-06-23T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Notes from my presentation at the University Ruby meetup at Cloudspace.</summary>
    <content type="html">&lt;p&gt;
&lt;em&gt;The following is a written / more accessible version of my presentation. It should include most of what I say aloud, as well as all of the code presented. For more, you can watch the &lt;a href=&quot;https://youtu.be/XSNpYvqmuoA&quot;&gt;Youtube video&lt;/a&gt; of the entire meetup.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
The purpose of this guide is to demonstrate various ways of running code that is written in other languages from within a Ruby program. Sometimes we need to run some fast code, or use features of another language. &lt;em&gt;Ugh!&lt;/em&gt; Don’t worry, though; it doesn’t have to be painful.&lt;/p&gt;
&lt;p&gt;
We’ll begin with everyone’s favorite…&lt;/p&gt;
&lt;h3&gt;
C&lt;/h3&gt;
&lt;p&gt;
When it comes to speed, it is hard to beat C. Sometimes you may find that an operation in Ruby just takes too long, or that you have to interface with someone’s legacy code. Either way, you have some options when it comes to running that code from Ruby.&lt;/p&gt;
&lt;p&gt;
Throughout this guide, we’ll use the example of the naïve (recursive, non-memoized) &lt;a href=&quot;https://en.wikipedia.org/wiki/Fibonacci_number&quot;&gt;Fibonacci number&lt;/a&gt; generator. That is, the following C function:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;int fib (int n) {

  if (n &amp;lt; 2)
    return n;

  return fib(n-1) + fib(n-2);
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This is a somewhat common test for language performance, as the number of function calls made grows exponentially with &lt;code class=&quot;inline&quot;&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
So, let’s look at a few ways you could run this code using Ruby.&lt;/p&gt;
&lt;h4&gt;
Straight C&lt;/h4&gt;
&lt;p&gt;
You can, of course, run this code by having Ruby make a system call to a compiled C executable. We’ll use this as a benchmark for the other methods. Here’s what that might look like in code:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;fib.c&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int fib (int n) {

  if (n &amp;lt; 2)
    return n;

  return fib(n - 1) + fib(n - 2);
}

int main (int argc, char **argv) {

  if (argc != 2) {
    printf(&amp;quot;Usage: ./fib &amp;lt;n&amp;gt;\n&amp;quot;);
    exit(1);
  }

  int result = fib(atoi(argv[1]));
  printf(&amp;quot;%d\n&amp;quot;, result);

  return 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In Ruby:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;puts&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;`/path/to/fib 42`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
The backticks (``) are just one way of making system calls in Ruby. This method assumes that you’ve already compiled the C code on your system, and you have a path to the executable handy.&lt;/p&gt;
&lt;p&gt;
While this may be elementary, don’t discount the fact that &lt;strong&gt;it works&lt;/strong&gt;… and you can get it running without too much effort.&lt;/p&gt;
&lt;h4&gt;
FFI&lt;/h4&gt;
&lt;p&gt;
FFI stands for &lt;em&gt;Foreign Function Interface&lt;/em&gt;, which is exactly the kind of thing we need. I recommend that you use FFI when you have a larger set of code that you wish to use. You can install FFI in the form of a gem using &lt;code class=&quot;inline&quot;&gt;gem install ffi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Using FFI is a bit more involved. Here’s what it looks like:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;fib.c&lt;/code&gt; is the same as above, except that it has been compiled into a shared object file using:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;gcc -c -fPIC -o fib fib.c
gcc -shared -o fib.so fib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;ffi.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #75715e&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;require &lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;ffi&apos;&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;module &lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;FibTest&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #66d9ef&quot;&gt;extend&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;FFI&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;::&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;Library&lt;/span&gt;&amp;#32;
  &amp;#32;
  &lt;span style=&quot;color: #f8f8f2&quot;&gt;ffi_lib&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;c&apos;&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #f8f8f2&quot;&gt;ffi_lib&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;./fib.so&apos;&lt;/span&gt;&amp;#32;
  &amp;#32;
  &lt;span style=&quot;color: #f8f8f2&quot;&gt;attach_function&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;:fib&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;[&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;:int&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;:int&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;end&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;result&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;FibTest&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;fib(&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;ARGV&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;].&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;to_i)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;puts&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;Result: &quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;+&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;result&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;to_s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
As you can see, the &lt;code class=&quot;inline&quot;&gt;fib()&lt;/code&gt; function is attached to and callable from the Ruby object. It doesn’t much matter what the &lt;code class=&quot;inline&quot;&gt;fib()&lt;/code&gt; function does beyond that.&lt;/p&gt;
&lt;p&gt;
You can expose as many functions as you wish in this way, and FFI will handle the language translation. When in doubt, try this method!&lt;/p&gt;
&lt;h4&gt;
RubyInline&lt;/h4&gt;
&lt;p&gt;
An alternative to FFI is RubyInline, which - as you’ll see in a moment - is a very apt name. I recommend that you use RubyInline when you have very short snippets of code you’d like to run. Like FFI, you can install RubyInline in the form of a gem, via &lt;code class=&quot;inline&quot;&gt;gem install RubyInline&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
This is going to look a bit messy, but let’s see how it works:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;inline.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #75715e&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;require&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;inline&apos;&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;class&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #a6e22e&quot;&gt;FibTest&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #f8f8f2&quot;&gt;inline&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;do&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;|&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;builder&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;|&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #f8f8f2&quot;&gt;builder&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;prefix&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;      int fib_inner (int n) {&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;        if (n &amp;lt; 2)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;          return n;&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;        return fib_inner(n - 1) + fib_inner(n - 2);&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;      }&quot;&lt;/span&gt;&amp;#32;
&amp;#32;
    &lt;span style=&quot;color: #f8f8f2&quot;&gt;builder&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;c&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;      int fib (int n) {&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;        return fib_inner(n);&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #e6db74&quot;&gt;      }&quot;&lt;/span&gt;&amp;#32;
  &lt;span style=&quot;color: #66d9ef&quot;&gt;end&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #66d9ef&quot;&gt;end&lt;/span&gt;&amp;#32;
&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;inline&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;FibTest&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;new&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;result&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;inline&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;fib(&lt;/span&gt;&lt;span style=&quot;color: #66d9ef&quot;&gt;ARGV&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;].&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;to_i)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;puts&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;Result: &quot;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;+&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;result&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;to_s&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
You’ll notice we’ve adapted the code slightly. RubyInline does a lot of translation when it comes to the types of parameters expected by the C functions. Thus, when you want to run a recursive function like &lt;code class=&quot;inline&quot;&gt;fib()&lt;/code&gt;, it is best to introduce a wrapper function. Here we’ve moved &lt;code class=&quot;inline&quot;&gt;fib()&lt;/code&gt; to &lt;code class=&quot;inline&quot;&gt;fib_inner()&lt;/code&gt; and instead exposed a &lt;code class=&quot;inline&quot;&gt;fib()&lt;/code&gt; wrapper function to the Ruby world.&lt;/p&gt;
&lt;p&gt;
The &lt;code class=&quot;inline&quot;&gt;fib_inner()&lt;/code&gt; function is defined using the &lt;code class=&quot;inline&quot;&gt;prefix&lt;/code&gt; method, which means that it won’t be translated by RubyInline. This is important because it calls itself, and that won’t work if RubyInline changes the way it accepts parameters.&lt;/p&gt;
&lt;h4&gt;
Comparison&lt;/h4&gt;
&lt;p&gt;
Great, so we have a few methods by which to call C code from Ruby. How do they compare, performance-wise? Here’s the raw data:&lt;/p&gt;
&lt;table class=&quot;c-comp&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left;&quot;&gt;
Method      &lt;/th&gt;
      &lt;th style=&quot;text-align: left;&quot;&gt;
Avg. Runtime (seconds)      &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Straight C      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
3.3777779      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Ruby + FFI      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
3.4948946      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
RubyInline      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
2.9529457      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Straight Ruby      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
64.398319      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
Interestingly, RubyInline performs faster than using a compiled C executable. Why is this? When we run the C executable, the OS has to create a new process, allocate some memory for the stack and heap of the program, and then supply it with its arguments. RubyInline avoids a lot of that mess by piggy-backing off of the resources already allocated to the Ruby process. This may not appear to be much of an improvement, but it can be significant with repeated calls over time.&lt;/p&gt;
&lt;h3&gt;
Python&lt;/h3&gt;
&lt;p&gt;
For working with Python in Ruby, you can use the &lt;em&gt;rubypython&lt;/em&gt; gem. Much like FFI (in fact, it uses FFI libraries), rubypython allows you to expose and interact with Python. Because Python uses an object model, rubypython completes the added task of exposing Python modules and objects to Ruby. You can install rubypython using &lt;code class=&quot;inline&quot;&gt;gem install rubypython&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;
Here’s just a quick example of how it works:&lt;/p&gt;
&lt;p&gt;
&lt;code class=&quot;inline&quot;&gt;py.rb&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;require&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;rubypython&apos;&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;RubyPython&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;start&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;numpy&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;RubyPython&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;import(&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;numpy&quot;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;module&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;numpy&apos;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;from&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;/(...)/numpy/__init__.pyc&apos;&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;arr&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;numpy&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;array(&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;array(&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;[&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;2&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;,&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;]&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;RubyPython&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;stop&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
You are, of course, limited by the syntax of both languages. For example, you cannot use the succinct array splicing syntax available in numpy ([::2]). This may be annoying to die-hard python developers. However, the entirety of the Python object/module and its methods are available, inheritable, etc.&lt;/p&gt;
&lt;h3&gt;
R&lt;/h3&gt;
&lt;p&gt;
As a final note, let’s take a brief look at using the R language within Ruby. You can do this using the &lt;code class=&quot;inline&quot;&gt;rinruby&lt;/code&gt; gem, installed via &lt;code class=&quot;inline&quot;&gt;gem install rinruby&lt;/code&gt;. Given that you have the R language installed locally, here’s how it looks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;require&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;rinruby&quot;&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;sample_size&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;=&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;10&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;10&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;R&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;eval&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;x &amp;lt;- rnorm(#{&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;sample_size&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;})&quot;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #75715e&quot;&gt;# (outputs code being run by R)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;R&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;eval&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #e6db74&quot;&gt;&quot;summary(x)&quot;&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;RINRUBY&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;PARSE&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;STRING&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;&amp;lt;-&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f8f8f2&quot;&gt;rinruby_get_value()&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;rinruby_parseable(&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;RINRUBY&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;PARSE&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;STRING)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;rm(&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;RINRUBY&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;PARSE&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;STRING)&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;summary(x)&lt;/span&gt;&amp;#32;
    &lt;span style=&quot;color: #66d9ef&quot;&gt;Min&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&amp;#32;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;st&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;Qu&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&amp;#32;&amp;#32;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;Median&lt;/span&gt;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;Mean&lt;/span&gt;&amp;#32;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;3&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;rd&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;Qu&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;Max&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;77660&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;35550&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #f92672&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;01425&lt;/span&gt;&amp;#32;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;14630&lt;/span&gt;&amp;#32;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;67590&lt;/span&gt;&amp;#32;&amp;#32;&lt;span style=&quot;color: #ae81ff&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #f92672&quot;&gt;.&lt;/span&gt;&lt;span style=&quot;color: #ae81ff&quot;&gt;58500&lt;/span&gt;&amp;#32;
&lt;span style=&quot;color: #f8f8f2&quot;&gt;print(&lt;/span&gt;&lt;span style=&quot;color: #e6db74&quot;&gt;&apos;RINRUBY.EVAL.FLAG&apos;&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2&quot;&gt;)&lt;/span&gt;&amp;#32;
 &lt;span style=&quot;color: #f92672&quot;&gt;=&amp;gt;&lt;/span&gt;&amp;#32;&lt;span style=&quot;color: #66d9ef&quot;&gt;true&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This is just a quick summary, as found in the &lt;a href=&quot;https://sites.google.com/a/ddahl.org/rinruby-users/documentation&quot;&gt;rinruby documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
Wrapping Up&lt;/h3&gt;
&lt;p&gt;
We like to write Ruby code, so we should do so whenever possible. If the need to use code written in another language arises, there’s no need to adopt that lanugage completely. With a few tools, you can use Ruby as a glue for your libraries and legacy codebases.&lt;/p&gt;
&lt;p&gt;
Thanks to the following articles for helping me get started:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
&lt;a href=&quot;https://www.amberbit.com/blog/2014/6/12/calling-c-cpp-from-ruby/&quot;&gt;Calling C/C++ from Ruby&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://github.com/halostatue/rubypython&quot;&gt;Rubypython&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://sites.google.com/a/ddahl.org/rinruby-users/documentation&quot;&gt;R in Ruby Quick Start&lt;/a&gt;  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Have a comment or correction? Send me a tweet!&lt;/p&gt;
&lt;style&gt;
    .c-comp {
    border-collapse: collapse;
    margin: 1rem auto 1.5rem;
  }
  .c-comp td, .c-comp th {
      border-bottom: 1px solid var(--ajBorderColor);
      padding: 0.5em;
      text-align: center;
  }&lt;/style&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Getting Started with Git</title>
    <link rel="alternate" href="https://aj-foster.com/2015/git-started/"/>
    <id>https://aj-foster.com/2015/git-started/</id>
    <updated>2015-03-02T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Notes from my lecture for PHY 3905 in Spring 2015.</summary>
    <content type="html">&lt;p&gt;
&lt;em&gt;This guide is a written / more accessible version of a lecture prepared for PHY 3905, a prototype class for introducing scientific computing. In context, the lecture provides a glimpse at Git and its uses to students who have recently been introduced to programming with Python, the Terminal, and basic shell tasks.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
In this guide, I hope to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Give you insight into what the Git is, and what it can do.  &lt;/li&gt;
  &lt;li&gt;
Make an argument for using Git in your projects.  &lt;/li&gt;
  &lt;li&gt;
Explain the basics of using Git.  &lt;/li&gt;
  &lt;li&gt;
Hint to the depth of functionality Git can provide.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Background&lt;/h3&gt;
&lt;p&gt;
There are some things that make software development difficult:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Working in a team where individuals are all working on a project at once, or where one or more members of the team are geographically separated from the rest  &lt;/li&gt;
  &lt;li&gt;
Mistakes happen. How do you revert back to a working version of your code?  &lt;/li&gt;
  &lt;li&gt;
When it is time to release your software, how do you keep track of different versions of the code?  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
These are just a few of the problems Git helps address.&lt;/p&gt;
&lt;h3&gt;
So… What is Git?&lt;/h3&gt;
&lt;p&gt;
Objectively speaking, Git is a &lt;em&gt;program&lt;/em&gt; that keeps track of the changes you make to files in a project. Subjectively, Git is a &lt;em&gt;system&lt;/em&gt; and a &lt;em&gt;mindset&lt;/em&gt; that allows you to write code smartly. For those who use it fully, Git can even define the way they approach working on a problem.&lt;/p&gt;
&lt;p&gt;
Think of Git as a ledger that keeps track of your work. While you work on the files in a code project, lines are added, modified, and deleted. Much like the &lt;a href=&quot;http://en.wikipedia.org/wiki/Algebraic_notation_%28chess%29&quot;&gt;written representation of a chess game&lt;/a&gt;, if you know the initial state of a file and how its contents are changed over time, you can reconstruct the changes.&lt;/p&gt;
&lt;table class=&quot;gs-ledger&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left;&quot;&gt;
Date      &lt;/th&gt;
      &lt;th style=&quot;text-align: left;&quot;&gt;
Commit      &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
A few days ago      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Created a new file called &lt;code class=&quot;inline&quot;&gt;myScript.sh&lt;/code&gt; with contents “…”      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Yesterday      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Changed &lt;code class=&quot;inline&quot;&gt;rm -rf&lt;/code&gt; to &lt;code class=&quot;inline&quot;&gt;rm -r&lt;/code&gt; on line 6 of &lt;code class=&quot;inline&quot;&gt;myScript.sh&lt;/code&gt;.      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Today      &lt;/td&gt;
      &lt;td style=&quot;text-align: left;&quot;&gt;
Added &lt;code class=&quot;inline&quot;&gt;# This script does...&lt;/code&gt; between lines 1 and 2 in &lt;code class=&quot;inline&quot;&gt;myScript.sh&lt;/code&gt;.      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;
As you work and edit your files, you periodically “commit” those changes. Each commit has a message attached to it, where you describe the changes you’ve made. Later on, you can look back at the commits you’ve made using &lt;code class=&quot;inline&quot;&gt;git log&lt;/code&gt; to see your progress.&lt;/p&gt;
&lt;h3&gt;
Why should we bother?&lt;/h3&gt;
&lt;p&gt;
Let’s imagine you make a change to your code that breaks everything. Instead of trying to figure out what you did, you can tell Git to revert your files back to a commit where everything worked. Because Git knows about the changes you’ve made, it can &lt;strong&gt;undo those changes automatically&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;
Another reason many people use Git is because it allows multiple people to work on the same project all at once. If you were to have multiple working on the same files, changes that one person makes would be overwritten the next time someone else saves. It’s a mess (trust me) and it doesn’t work. With Git, you can give everyone a copy of your project. When people commit their changes and push them to a central location, Git will &lt;strong&gt;automatically merge&lt;/strong&gt; the changes. This is extremely important, especially if you find yourself working with people who are not geographically close to you.&lt;/p&gt;
&lt;p&gt;
Finally, Git keeps you accountable. You and others working on a project can see the changes you make. If you commit some awesome code, everyone will be able to tell it’s yours. If you commit something that breaks the rest of the code, other people on the project will know who to ask about it.&lt;/p&gt;
&lt;h3&gt;
So how does it work?&lt;/h3&gt;
&lt;p&gt;
Imagine this setup: you are working on a homework assignment - a Python script - for this class. It’s in a folder called &lt;code class=&quot;inline&quot;&gt;hw100_rob&lt;/code&gt;. Let’s jump in and see what’s happening:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: ~ $ cd hw100_rob
AJFoster :: hw100_rob $ git status
fatal: Not a git repository (or any of the parent directories): .git&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
What happened? We used a command, &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt;, to check on the status of our git repository (we’ll see more about what this does later). However, we haven’t created a repository here, so git has nothing to report.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;em&gt;To create a git repository, &lt;code class=&quot;inline&quot;&gt;cd&lt;/code&gt; into the project directory and run &lt;code class=&quot;inline&quot;&gt;git init&lt;/code&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: hw100_rob $ git init
Initialized empty Git repository in .../hw100_rob/.git/
AJFoster :: hw100_rob $ git status
On branch master

Initial commit

nothing to commit (create/copy files and use &amp;quot;git add&amp;quot; to track)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Now we have a git repository in the &lt;code class=&quot;inline&quot;&gt;hw100_rob&lt;/code&gt; directory. When you run &lt;code class=&quot;inline&quot;&gt;git init&lt;/code&gt;, Git creates a hidden directory, &lt;code class=&quot;inline&quot;&gt;.git&lt;/code&gt;, in which to store its data. &lt;strong&gt;Don’t mess with this directory&lt;/strong&gt;, else you could lose your commit history.&lt;/p&gt;
&lt;p&gt;
We also ran &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt; to see the current status of the files in the directory. Right now, there aren’t any files, so Git has nothing to report. In practice, you’ll be typing &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt; a lot as you learn how Git behaves in response to your commands.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;em&gt;Use &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt; to see the current status of the files in your Git repository.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Let’s create our homework file. Like a good student, we start by adding a comment at the top with our name and other information.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: hw100_rob $ git status
On branch master

Initial commit

Untracked files:
  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)

    my_script.py

nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
Hooray! Git recognizes that we’ve created the file. Notice that &lt;code class=&quot;inline&quot;&gt;my_script.py&lt;/code&gt; is listed as an “untracked file”. There may be files in your repository that you do not wish to keep track of. For example, if you are working on a web application and publishing the files using Git, you probably don’t want to include files that contain passwords.&lt;/p&gt;
&lt;p&gt;
Now we’ll add the file to the repository.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;em&gt;Use &lt;code class=&quot;inline&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt; to have Git track a file in the repository.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
If we run &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt; now, we’ll see that Git is ready to accept our changes (i.e. the addition of &lt;code class=&quot;inline&quot;&gt;my_script.py&lt;/code&gt;) in a commit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: hw100_rob $ git add my_script.py 
AJFoster :: hw100_rob $ git status
On branch master

Initial commit

Changes to be committed:
  (use &amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot; to unstage)

    new file:   my_script.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
At this point, &lt;code class=&quot;inline&quot;&gt;my_script.py&lt;/code&gt; is in “staging”. The stage is a place to collect files we’re done editing so that we can commit them together. Since we don’t have any more files to add to this commit, we’ll go ahead and…&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: hw100_rob $ git commit -m &amp;quot;My first commit.&amp;quot;
[master (root-commit) ae828d5] My first commit.
 1 file changed, 3 insertions(+)
 create mode 100644 my_script.py&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
This commits all of the staged changes to the repository’s history. If we make changes in the future and want to revert back to the way things are right now, we can. We’ll also be able to look back at the history to see what was changed, along with the message we wrote.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;em&gt;Use &lt;code class=&quot;inline&quot;&gt;git commit -m &amp;quot;&amp;lt;message&amp;gt;&amp;quot;&lt;/code&gt; to commit all of the changes in staging with a short commit message.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
Let’s take a look at the log now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AJFoster :: hw100_rob $ git log
commit ae828d5fe0722ca5439f7d358fda941d53832e6f
Author: AJ Foster &amp;lt;email@example.com&amp;gt;
Date:   Thu Mar 26 13:03:35 2015 -0400

    My first commit.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
In the output, you see a string of characters representing the commit. For our purposes, think of this simply as a unique tag for every set of changes. It also shows the author, and the time of the commit. Lastly, we see the message attached to it.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;
&lt;em&gt;Use &lt;code class=&quot;inline&quot;&gt;git log&lt;/code&gt; to see a log of the commit history. Type &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; to exit the log.&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
Is that it?&lt;/h3&gt;
&lt;p&gt;
For the most basic usage of Git… yes, that’s all there is to it. You should be aware that there are many aspects of using Git which aren’t covered here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Etiquette: when working on a team, there are guidelines (which are sometimes not well-documented) about how to use Git in a way that doesn’t create more work for everyone else. For example, you shouldn’t rewrite the history or “push” your code in such a way that it deletes others’ commits.  &lt;/li&gt;
  &lt;li&gt;
Branching: Git has a feature called branching, in which you tell Git to store your current changes in a separate set of history. You can switch back and forth between branches in order to work on something experimental without contaminating the main branch’s history.  &lt;/li&gt;
  &lt;li&gt;
Open-sourcing: Git is one way people package their software so the world can see it. You can post your code (using Git) to a site like GitHub so others can download, modify, and use what you wrote.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
How do I get started?&lt;/h3&gt;
&lt;p&gt;
I highly suggest you check out &lt;a href=&quot;https://try.github.io/&quot;&gt;this resource from Code School&lt;/a&gt;. It’ll take you though the basic Git tasks, and explain what is happening as you go.&lt;/p&gt;
&lt;h3&gt;
Important things to remember&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
Always run &lt;code class=&quot;inline&quot;&gt;git status&lt;/code&gt; to see the current state of the repository. You’ll learn to do this compulsively as you work.  &lt;/li&gt;
  &lt;li&gt;
Commit often (especially when you are done with a specific task). It’ll be easier to revert back if something goes wrong later.  &lt;/li&gt;
  &lt;li&gt;
Practice! Git, like anything, takes practice. It is worth your time to become familiar with Git now &lt;em&gt;before&lt;/em&gt; you have to use it in a team setting.  &lt;/li&gt;
  &lt;li&gt;
GitHub is a website; Git is the program it uses.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Edit (2021-01-24): The Try Git resource mentioned above, unfortunately, no longer exists. However, the site does link to a number of helpful resources.&lt;/p&gt;
&lt;style&gt;
      .gs-ledger {
        border-collapse: collapse;
        margin: 0 auto 1em;
    }
    .gs-ledger td {
        border-bottom: 1px solid var(--ajBorderColor);
        padding: 0.5em 0.5em 0;
    }&lt;/style&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Terminal Basics</title>
    <link rel="alternate" href="https://aj-foster.com/2014/exploring-terminal/"/>
    <id>https://aj-foster.com/2014/exploring-terminal/</id>
    <updated>2014-10-20T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Notes from my talk &quot;Exploring Terminal&quot; for Design &amp; Code at UCF.</summary>
    <content type="html">&lt;p&gt;
In this guide, I hope to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Give you insight into what the terminal is, and what it can do.  &lt;/li&gt;
  &lt;li&gt;
Explain the risks and rewards of using the terminal.  &lt;/li&gt;
  &lt;li&gt;
Encourage you to try it out with some simple tasks.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;em&gt;Note: “Terminal” in this guide refers to the UNIX-like terminal you’ll find in a Mac or Linux Operating System. Although some of the functionality described here can be replicated in the Windows PowerShell, it is a fundamentally different environment. I highly encourage Windows users to check out &lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;, which is designed to give you a proper UNIX-like environment on Windows.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
What is the mystical Terminal?&lt;/h3&gt;
&lt;p&gt;
In short, the Terminal is a window that gives you direct access to your Operating System. Instead of using an application to pass your requests on to the OS, you can tell it what to do with simple commands.&lt;/p&gt;
&lt;p&gt;
It’s a lot like the difference between going to advising and signing up for classes online. Even though an application on your computer (your advising office) can do everything you need, why wade through all of its policies and restrictions when you can tell the system (myUCF) exactly what you want and have it done immediately?&lt;/p&gt;
&lt;p&gt;
Of course, this makes the terminal dangerous. Because you are directly telling the OS what to do, there are minimal safeguards; for example: if you delete a file, it’s gone forever. You can seriously mess up your system (trust me, I have). Don’t let that turn you away, though; if you respect the terminal, it can be a very powerful tool.&lt;/p&gt;
&lt;h3&gt;
So, how does it work?&lt;/h3&gt;
&lt;p&gt;
When you type into a terminal, it has a list of places to check for commands that match whatever you type (the &lt;a href=&quot;http://en.wikipedia.org/wiki/PATH_%28variable%29&quot;&gt;$PATH variable&lt;/a&gt;, an advanced topic). For example, if you enter “whoami” in your terminal, it checks a few places for an executable file called “whoami”. When it finds /usr/bin/whoami, it runs it, and that executable prints out your username.&lt;/p&gt;
&lt;p&gt;
By default, you have over a thousand commands you can run, with functionalities ranging from copying files to creating partitions on your hard disk. Let’s take a look at some basic commands for navigating and managing your files.&lt;/p&gt;
&lt;p&gt;
When you start a new terminal session, your current location or “working directory” is your home folder, such as /home/someuser. You can run &lt;code class=&quot;inline&quot;&gt;pwd&lt;/code&gt; to find out where you are, &lt;code class=&quot;inline&quot;&gt;cd&lt;/code&gt; to change directories, and &lt;code class=&quot;inline&quot;&gt;ls&lt;/code&gt; to list the files in your current location.&lt;/p&gt;
&lt;p class=&quot;image&quot;&gt;
      &lt;img src=&quot;https://assets.aj-foster.com/assets/2015/term1.png&quot; title=&quot;Navigating Filesystems&quot; alt=&quot;Basic Filesystem Navigation in Terminal&quot;&gt;
    &lt;span class=&quot;tsxs&quot;&gt;Basic Filesystem Navigation in Terminal&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
As you can see, the commands are like small building blocks you can put together to do interesting things. Some commands have arguments associated with them: for example, &lt;code class=&quot;inline&quot;&gt;cd &amp;lt;location&amp;gt;&lt;/code&gt; changes directory to the specified location. Commands might have flags as well: for example, &lt;code class=&quot;inline&quot;&gt;ls -l&lt;/code&gt; gives you more information about the files in your current directory.&lt;/p&gt;
&lt;p class=&quot;image&quot;&gt;
      &lt;img src=&quot;https://assets.aj-foster.com/assets/2015/term2.png&quot; title=&quot;Commands with Arguments and Flags&quot; alt=&quot;Example Commands with Arguments and Flags&quot;&gt;
    &lt;span class=&quot;tsxs&quot;&gt;Example Commands with Arguments and Flags&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;
With frequent use, you will memorize most of the basic commands you need to work in the terminal. For other commands, you have Google and Manual Pages at your disposal.&lt;/p&gt;
&lt;p&gt;
If you run &lt;code class=&quot;inline&quot;&gt;man pwd&lt;/code&gt;, you’ll see the manual page for the &lt;code class=&quot;inline&quot;&gt;pwd&lt;/code&gt; command. At the top is a short description of what it does. Further down, you can see all of the arguments, flags, and options the command might accept. For &lt;code class=&quot;inline&quot;&gt;pwd&lt;/code&gt;, there are only two possible flags that change the behavior depending on how your filesystem is structured. &lt;em&gt;Note: Man pages are displayed in a terminal program called &lt;code class=&quot;inline&quot;&gt;less&lt;/code&gt;. You can use the up/down arrows to scroll. To exit, press Q.&lt;/em&gt;&lt;/p&gt;
&lt;p class=&quot;image&quot;&gt;
      &lt;img src=&quot;https://assets.aj-foster.com/assets/2015/term3.png&quot; title=&quot;Man Pages&quot; alt=&quot;Manual Page for the pwd Command&quot;&gt;
    &lt;span class=&quot;tsxs&quot;&gt;Manual Page for the pwd Command&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;
Why should I care?&lt;/h3&gt;
&lt;p&gt;
Sure, there are applications out there to do most anything you need. Many users never touch the terminal, and aren’t any worse off because of it. Here are a few reasons I use the terminal on a regular basis:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Some things are much easier in the terminal. Example: any repetitive action (such as renaming many files at once, or according to some rule). &lt;em&gt;Note: OS X Yosemite helps out with this particular example.&lt;/em&gt;  &lt;/li&gt;
  &lt;li&gt;
The terminal can replace entire applications. Example: with prior setup, you can use &lt;code class=&quot;inline&quot;&gt;sudo apachectl start&lt;/code&gt; to replace MAMP for running a web server locally on your Mac.  &lt;/li&gt;
  &lt;li&gt;
You can save money. Example: if you want to compile Sass into CSS, you could pay for CodeKit on the Mac (a fantastic investment, if you can make it), or you can install and use the &lt;code class=&quot;inline&quot;&gt;sass&lt;/code&gt; command in terminal.  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
How do I get started?&lt;/h3&gt;
&lt;p&gt;
If you find yourself needing to do a simple task on your computer, try it out in terminal. For example, if you need to open a PDF on your Mac, try &lt;code class=&quot;inline&quot;&gt;cd&lt;/code&gt;-ing to the correct directory and using &lt;code class=&quot;inline&quot;&gt;open &amp;lt;filename&amp;gt;&lt;/code&gt; instead of going through Finder. Periodically ask yourself if you can replace an application with a few terminal commands. A lot of times, the answer will be “yes.”&lt;/p&gt;
&lt;p&gt;
Here are some technical things to keep in mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Commands and filenames are case sensitive.  &lt;/li&gt;
  &lt;li&gt;
Things are different across operating systems (very different on Windows).  &lt;/li&gt;
  &lt;li&gt;
The &lt;code class=&quot;inline&quot;&gt;rm&lt;/code&gt; command, for deleting a file, is permanent.  &lt;/li&gt;
  &lt;li&gt;
There are plenty of resources to help you out!  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
What’s next?&lt;/h3&gt;
&lt;p&gt;
If you are interested in learning more, check out some of these advanced topics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
&lt;a href=&quot;https://www.cygwin.com/&quot;&gt;Cygwin&lt;/a&gt;, for getting a UNIX-like environment on Windows.  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;http://en.wikipedia.org/wiki/PATH_%28variable%29&quot;&gt;The $PATH variable&lt;/a&gt;, which tells your terminal where to look for commands.  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;http://itsmetommy.com/2011/02/09/changing-your-shell-prompt/&quot;&gt;Changing your prompt&lt;/a&gt;, because doing so is strangely satisfying.  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://supportweb.cs.bham.ac.uk/docs/tutorials/docsystem/build/tutorials/unixscripting/unixscripting.html&quot;&gt;Basics of Shell Scripting&lt;/a&gt;, because shell (terminal language) scripts can do pretty much anything.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Edit (2021-01-24): The Windows Subsystem for Linux is now a much better resource than Cygwin mentioned above.&lt;/p&gt;
&lt;style&gt;
      .image {
        border: 2px solid var(--ajBorderColor);
        margin: auto;
        max-width: 40rem;
        padding: 1rem;
        text-align: center;
    }

    .image &gt; img {
        max-width: 100%;
    }&lt;/style&gt;
</content>
  </entry>

  
  
  <entry>
    <title>Notes from Front-End Design Conference 2014</title>
    <link rel="alternate" href="https://aj-foster.com/2014/frontendconf-2014-notes/"/>
    <id>https://aj-foster.com/2014/frontendconf-2014-notes/</id>
    <updated>2014-07-14T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>July 10-11, 2014 in St. Petersburg, Florida</summary>
    <content type="html">&lt;p&gt;
Please note that these are my personal notes that were not originally intended for public consumption. While I did edit them lightly for mechanics, all of the notes come directly as quotations or paraphrases of the speaker’s own words. My personal commentary is set apart &lt;em&gt;in italics&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;
Most of the context provided by the speakers at the beginning of their talks is missing from these notes. I chose to focus on the main points and memorable quotations.&lt;/p&gt;
&lt;p&gt;
The length of the notes for each talk has to do with how well my note-taking rhythm fell in phase with the speaker’s rhythm; it is not a reflection of how interesting the talks were relative to each other.&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Human First Web Design&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Daniel Ryan&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/dryan&quot;&gt;@dryan&lt;/a&gt; - &lt;a href=&quot;https://dryan.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Daniel Ryan worked as the Director of Front-end Development for the 2012 Barack Obama campaign. He related some of the things he learned throughout the campaign process.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Design is not just aesthetics; design is a thoughtful process. We’re all designers.&lt;/p&gt;
&lt;p&gt;
“Frictionless” is better than funneled. He shared a story about a Square fundraising app that failed because it asked too much, made the user work too hard, etc. The recipients read fundraising emails on their phones, but didn’t complete the process because the mobile experience was poor.&lt;/p&gt;
&lt;p&gt;
Throughout the campaign, they used custom analytics and a bunch of A/B tests. You shouldn’t just test: optimize. Have a strategy. Before you run a test, have a hypothesis about the results.&lt;/p&gt;
&lt;p&gt;
“Humans are more important than business goals.”&lt;/p&gt;
&lt;p&gt;
“Being where users are is better than trying to get them where you want them to be.”&lt;/p&gt;
&lt;p&gt;
The volunteer experience matters too. They created an iPad app to help volunteers get connected to nearby opportunities. It was backed by a Django app that tracked shifts.&lt;/p&gt;
&lt;p&gt;
“Being smarter is better than being perfect.”&lt;/p&gt;
&lt;p&gt;
In the process of creating the application, they could have imported the existing spreadsheets of available shifts instead of having an awesome admin interface to input them manually. In general, you should start with a static design and justify every dynamic feature you add. Static sites don’t break like dynamic sites do.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Sidenote: Daniel is hiring python developers.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Daniel’s position gave him the unique ability to rapidly test and iterate materials that were consumed by many users over a short period of time. In my opinion, his focus on maintaining simplicity for users, using data for design decisions, and putting humans at the center of the work, is wonderful. As a backend developer, I enjoy his policy of starting with static materials and justifying the need for dynamic content.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Animating the Web in a Post-Flash World&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Rachel Smith&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/rachsmithtweets&quot;&gt;@rachsmithtweets&lt;/a&gt; - &lt;a href=&quot;http://rachsmith.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Rachel Smith is a front-end developer working for &lt;a href=&quot;http://activetheory.net/&quot;&gt;Active Theory&lt;/a&gt;. She spoke about the decision process that occurs when including animations on client projects.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
We used to have many flash web sites with lots of motion and interaction; then came a trend of static web sites. Now we have transitional interfaces: how can we incorporate motion to make the experience better for our users?&lt;/p&gt;
&lt;p&gt;
We should all think about animating more. It helps us communicate a narrative. It gives the user cues about how to use the interface.&lt;/p&gt;
&lt;p&gt;
There’s a lot of new stuff to sort through and learn. There’s CSS, Canvas, SVG, WebGL.&lt;/p&gt;
&lt;p&gt;
CSS Animations vs. JavaScript frame-by-frame:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
When animating with CSS, the calculations are handed off to a separate thread with the GPU. That means better performance. JS stuff happens on the main browser thread.  &lt;/li&gt;
  &lt;li&gt;
The lack of a need for JavaScript is pretty cool.  &lt;/li&gt;
  &lt;li&gt;
You don’t have much control, though, over CSS animations.  &lt;/li&gt;
  &lt;li&gt;
You &lt;em&gt;can&lt;/em&gt; use JavaScript to control the CSS, though.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Canvas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
You can paint complicated stuff on a Canvas without filling up the DOM.  &lt;/li&gt;
  &lt;li&gt;
It can perform bitmap manipulations.  &lt;/li&gt;
  &lt;li&gt;
Unfortunately, it isn’t crawl-able for SEO purposes.  &lt;/li&gt;
  &lt;li&gt;
It also isn’t stateful, so you have to manually keep track of what it is doing with JavaScript.  &lt;/li&gt;
  &lt;li&gt;
Canvas is good for a scene with a lot of things moving around. Examples: particle demonstrations and games.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
SVG:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Major pro: It’s vector-based.  &lt;/li&gt;
  &lt;li&gt;
It’s crawl-able, because it works with real elements.  &lt;/li&gt;
  &lt;li&gt;
You can animate defined paths.  &lt;/li&gt;
  &lt;li&gt;
It is highly complex, though, which can hurt performance.  &lt;/li&gt;
  &lt;li&gt;
Using SVG is good for scaling icons and animating along defined paths.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There are no strict rules concerning animation. You have to experiment with it. The two important goals are performance and purpose. If an animation doesn’t serve your overall goal, it’s useless.&lt;/p&gt;
&lt;p&gt;
Know your browsers, write efficient JavaScript, and know something about motion. Good JavaScript is key: watch memory and garbage collection, have efficient code, and perform event listening / handling wisely. She mentioned using JS object pools (arrays of objects that are recycled) so that garbage collection doesn’t kick in and reduce performance / frame rate.&lt;/p&gt;
&lt;p&gt;
Libraries don’t matter that much. They can help you do things faster, but if you don’t understand the JavaScript, it won’t turn out very well.&lt;/p&gt;
&lt;p&gt;
Watching motion graphic examples helps. Try taking examples not from the web, but from TV and video.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;I believe one of the most important takeaways from this talk is the idea that animation, as a tool, can add value to your user’s experience. It is no longer an all (flash) or nothing (static) decision to make. Of course, the animations you use should have purpose. Rachel did a good job of giving us a feel for the circumstances in which each method (CSS and JS, Canvas, or SVG) would be effective. Now it’s up to us to try it out and have some fun with it.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Thinking Modular CSS&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Drew Barontini&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/drewbarontini&quot;&gt;@drewbarontini&lt;/a&gt; - &lt;a href=&quot;http://drewbarontini.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Drew Barontini is a front-end developer at &lt;a href=&quot;http://codeschool.com&quot;&gt;Code School&lt;/a&gt;. As co-creator of &lt;a href=&quot;http://mvcss.github.io/&quot;&gt;MVCSS&lt;/a&gt;, he shared about the thought process that goes behind CSS architecture, with MVCSS as an example.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Front-End Development is a thing. Although HTML and CSS are easy to write, they are not easy to write well. They need to be modular. They need to be self-contained. When you write front-end code, think about modules, components, and patterns, instead of pages. Make solutions that are reusable.&lt;/p&gt;
&lt;p&gt;
Modular design divides a system into small parts. They are independent, and can be reused in different systems. Furthermore, small chunks are more maintainable. Each module has one job, and it is entirely encapsulated.&lt;/p&gt;
&lt;p&gt;
Example: a cell module &lt;em&gt;only&lt;/em&gt; handles width limiting.&lt;/p&gt;
&lt;p&gt;
Positioning and layout are constant struggles with modular CSS. You have to abstract them outwards and apart from each other.&lt;/p&gt;
&lt;p&gt;
Some tenants of modular CSS:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
IDs are bad. Classes are good, because it flattens the layers of specificity.  &lt;/li&gt;
  &lt;li&gt;
Naming conventions are important, regardless of what they actually are.  &lt;/li&gt;
  &lt;li&gt;
You should have a process of constant evaluation.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Let’s use MVCSS as an example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Strict naming convention, like BEM. Modifiers are alternate sets of styles. States are added with JavaScript (ex: an is-hover class). Then there’s context (ex: a has-dropdown class sets position: relative).   &lt;/li&gt;
  &lt;li&gt;
Submodules are scoped to a parent module (ex: btn, btn-a, btn-b).  &lt;/li&gt;
  &lt;li&gt;
Abstract structure: a navigation structure shouldn’t care how it is positioned. You can abstract up to a grid module or something similar.  &lt;/li&gt;
  &lt;li&gt;
Don’t use &lt;a href=&quot;http://csswizardry.com/2012/11/code-smells-in-css/#magic-numbers&quot;&gt;magic numbers&lt;/a&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Steps to take:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Identify the patterns you need to work with. Some examples: rows, cells, wells, and grids. Look for common patterns we can use like cards and lists. Look for unique patterns, like Dribbble’s color list. Use a &lt;a href=&quot;https://github.com/drewbarontini/front-end-audit&quot;&gt;front-end audit&lt;/a&gt; to outline the patterns.  &lt;/li&gt;
  &lt;li&gt;
Define stuff by looking at the module’s responsibility. That gives you its name.  &lt;/li&gt;
  &lt;li&gt;
Build it.  &lt;/li&gt;
  &lt;li&gt;
Combine the modules. This is the interesting part.  &lt;/li&gt;
  &lt;li&gt;
Refine and refactor, over and over and over again. Don’t be afraid to be specific and abstract it out as you build.  &lt;/li&gt;
  &lt;li&gt;
Look for weaknesses: magic numbers, fixed widths on elements, unsetting styles, and repeating styles.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Always be evaluating.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;While the talk used MVCSS as an example, the point was to encourage careful thought about CSS architecture. MVCSS may seem like a strict, opinionated setup, but that’s all the better reason to think through the problems it solves yourself. Drew effectively insists that front-end implementation stand on its own as a concern of your project.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
The Right Tool for the Job: Designing in the Browser for Agencies&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Andi Graham&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/andigrahambsd&quot;&gt;@andigrahambsd&lt;/a&gt; - &lt;a href=&quot;http://bigseadesign.com/team/andi-graham&quot;&gt;Big Sea Profile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Andi Graham leads the team at &lt;a href=&quot;http://bigseadesign.com/&quot;&gt;Big Sea&lt;/a&gt;, a digital creative agency. She spoke about how designing in the browser affects the dynamics of client work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
We aren’t always able to communicate with clients well enough to maintain our vision. Designing in the browser can help with this.&lt;/p&gt;
&lt;p&gt;
Designing in the browser:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Eliminates the redundancy of designing things twice (in Photoshop and for the browser).  &lt;/li&gt;
  &lt;li&gt;
Allows you and the client to interact with the design.  &lt;/li&gt;
  &lt;li&gt;
Allows you to make quick changes easily, especially when you use preprocessors.  &lt;/li&gt;
  &lt;li&gt;
Makes the design actually work. You can move parts of the design into the final project.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
What do you lose if you don’t use Photoshop?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
You lose some of the aesthetic appeal that you can get from Photoshop.  &lt;/li&gt;
  &lt;li&gt;
It is difficult to design in the browser if you don’t have all of the content.  &lt;/li&gt;
  &lt;li&gt;
HTML and CSS are not design tools.  &lt;/li&gt;
  &lt;li&gt;
Clients can’t necessarily see where things are headed along the way.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Some steps to take:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Get on the same page with your client. This might involve a kickoff meeting, mood boards, etc. Do gut checks: show sites that might be similar to what the client wants. &lt;em&gt;Check out &lt;a href=&quot;http://visage.co/&quot;&gt;Visage&lt;/a&gt;.&lt;/em&gt;  &lt;/li&gt;
  &lt;li&gt;
Style tiles are cool. All the cool kids do them. Maybe try out digital style guides, because Sass makes that easy.  &lt;/li&gt;
  &lt;li&gt;
Understand the project’s constraints. Designers might not be aware of the constraints, and that isn’t good. You can leverage those constraints when you present (read: explain) your design to the client.  &lt;/li&gt;
  &lt;li&gt;
Show your work. It’s okay for the client to see how ugly the product is at the outset.  &lt;/li&gt;
  &lt;li&gt;
When you show the client your work, help them give feedback. Give them bullet points of what to look at. Make sure your client knows to question things early on, for the sake of your time and their budget.  &lt;/li&gt;
  &lt;li&gt;
As a designer, be involved in client meetings. Keep communication open. Never just send over a proof; make sure you are there to explain and have a conversation about the design.  &lt;/li&gt;
  &lt;li&gt;
Don’t be afraid of Photoshop. Visual problem-solving is hard when you are trying to write code.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;em&gt;Designing in the browser can be a controversial topic, in my experience. The big takeaway that almost everyone can accept is that designing in the browser changes the dynamics of your project in a way that can improve communication with clients. I’m curious to see if a pseudo-implementation of this policy (i.e. design in Photoshop first internally, then walk the client through the implementation in the browser) might have some of the same benefits. The bottom line is, for me, more communication is always better.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
I Have No Idea What I’m Doing&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Elyse Holladay&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/elyseholladay&quot;&gt;@elyseholladay&lt;/a&gt; - &lt;a href=&quot;http://www.elyseholladay.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Elyse Holladay is a teacher, developer, and designer at &lt;a href=&quot;http://www.makersquare.com/&quot;&gt;Maker Square&lt;/a&gt;. She spoke about addressing our fears and overcoming self-judgment.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Sometimes, we focus on our “tigers”: the things that scare us. That isn’t what we should think about.&lt;/p&gt;
&lt;p&gt;
“Is being good at something the only measure of its worth?” Just because we aren’t good at something doesn’t mean we can’t enjoy it; doesn’t mean that it doesn’t have value.&lt;/p&gt;
&lt;p&gt;
It’s most important to learn what things we don’t know. The dangerous situation is when we don’t know that we don’t. Note that we still feel bad about those things when we discover them. We shouldn’t feel bad, though.&lt;/p&gt;
&lt;p&gt;
“We tend to judge others by the end product, and judge ourselves by the struggle we went through to get there.”&lt;/p&gt;
&lt;p&gt;
Imposter syndrome is a thing. Everyone has it. Be lucky, set goals, work joyously, share your doubts… The biggest hurdle isn’t ability, it’s doubts. Be kind to yourself. Celebrate your wins. Help others.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Elyse began with a story of someone who is running away from a tiger, reaches a cliff, and climbs part-way down some vines that hang there. There are tigers above and below her, but she takes time to eat and enjoy a strawberry hanging next to her. Part of the lesson is to not let our insecurities - the things we don’t know - stop us from using and enjoying the things we do. I definitely agree with the notion that discovering what it is that we don’t know, though frustrating, is extremely important.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
How to Build Kickass E-Mails&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Kevin Mandeville&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/kevingotbounce&quot;&gt;@kevingotbounce&lt;/a&gt; - &lt;a href=&quot;http://litmus.com/lp/frontendconf&quot;&gt;Talk Resources&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Kevin Mandeville works for &lt;a href=&quot;http://litmus.com/&quot;&gt;Litmus&lt;/a&gt; designing HTML emails. He spoke about the crucial differences between designing emails and web pages, and how to get started.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Email has progressed more slowly than the web due to client fragmentation. At the moment, mobile is in the lead in terms of the clients used to read emails. With that said, the important thing is to know your particular audience. Your demographics might be very different than the average. Email design requires you to choose which clients to support.&lt;/p&gt;
&lt;p&gt;
How to build emails:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Email design is not web design. The first step is acceptance…  &lt;/li&gt;
  &lt;li&gt;
Use tables, not divs. It’s frustrating, but deal with it.  &lt;/li&gt;
  &lt;li&gt;
Best single piece of advice: “&amp;lt;td&amp;gt; or GTFO (get to fixing Outlook)”.  &lt;/li&gt;
  &lt;li&gt;
Only apply styling to TDs. Exceptions: links, images, spans.  &lt;/li&gt;
  &lt;li&gt;
Keep emails modular.   &lt;/li&gt;
  &lt;li&gt;
One-column design works best for emails. It also performs better analytics-wise.  &lt;/li&gt;
  &lt;li&gt;
Maximum width of 600px.  &lt;/li&gt;
  &lt;li&gt;
Never use margin, always use padding.   &lt;/li&gt;
  &lt;li&gt;
Use HTML attributes when possible (ex: height, width, bgcolor).  &lt;/li&gt;
  &lt;li&gt;
CSS must be inline.  &lt;/li&gt;
  &lt;li&gt;
Use &amp;lt;b&amp;gt;, not strong. Use px, not em or rem. Use full hex codes. Use align, not floats.  &lt;/li&gt;
  &lt;li&gt;
Always align your &amp;lt;td&amp;gt;s.  &lt;/li&gt;
  &lt;li&gt;
iOS needs a &amp;lt;span&amp;gt; to overwrite default link styling.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Single most misunderstood thing about email: responsive email is not supported everywhere. There’s a difference between device support and application support (devices might have several email rendering engines available).&lt;/p&gt;
&lt;p&gt;
Single most overlooked thing: the images-off view. 43% of emails are viewed with images off. Never forget alt text.&lt;/p&gt;
&lt;p&gt;
Images should be display: block. Google caches images… And compresses them. You might not want to compress images before sending them. Don’t use images for buttons. Use bulletproof buttons: see &lt;a href=&quot;http://buttons.cm/&quot;&gt;buttons.cm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;
Use preheader text for better (+30%) open rates. Reset styles can go in the header. If you wrap font face properties in a media tag, they will be ignored by Outlook.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;HTML email has become a point of contention in our community because of the unsemantic markup required. Yet, there is a need for individuals who can design and implement it. Unfortunately the stigma (that admittedly, I have helped to perpetuate) does not help the area to improve.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Boxes &amp;amp; Grids, Oh My&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Noah Stokes&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/motherfuton&quot;&gt;@motherfuton&lt;/a&gt; - &lt;a href=&quot;http://esbueno.noahstokes.com/&quot;&gt;Actual Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Noah Stokes is a designer / developer at &lt;a href=&quot;http://hellobold.com/&quot;&gt;Bold&lt;/a&gt; and a professional composer of tweets. He spoke about the notion that “responsive web design all looks the same” and what we can do about it.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
“The web was losing its soul… And I was blaming RWD.”&lt;/p&gt;
&lt;p&gt;
The soul of a site is the intangible details of its design. While there is a trend towards flat design, that isn’t an excuse for lazy design. Some of the problem lies in decreased budgets in the comp phase of design. Skill sets also play a role.&lt;/p&gt;
&lt;p&gt;
RWD is still young, so we rely on trends to become comfortable with it. There are a lot of talks about it, but people are still just now starting to get involved.&lt;/p&gt;
&lt;p&gt;
RWD isn’t taking the soul out of design, the way we implement it is. So what can we do?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Think outside of the box. It can be easy to look at a design and figure out how to implement it. We can get confused about how to implement “different” designs, and give up.  &lt;/li&gt;
  &lt;li&gt;
Think about duplicating HTML for small pieces. Maybe you &lt;em&gt;should&lt;/em&gt; use absolute and fixed positioning. Don’t forget about JavaScript too.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
It doesn’t hurt to take a step back and let your subconscious work on it for a while.&lt;/p&gt;
&lt;p&gt;
Don’t settle. Think outside of the box. Bring back the soul.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;After his original frustration, Noah came to a fair understanding of the dynamic between the responsive web and design. It is true that RWD is still a young area, and our way of thinking about it has yet to fully mature. Dealing with its unique problems just might require some less-than-semantic solutions, and that’s okay. If the method adds value to your user’s experience, that is what really matters.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;p&gt;
&lt;em&gt;The following are talks from day two.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Lessons from the Lemonade Stand&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Carl Smith&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/carlsmith&quot;&gt;@carlsmith&lt;/a&gt; - &lt;a href=&quot;http://devianthippie.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Carl Smith is the “advisor” of &lt;a href=&quot;http://www.ngenworks.com/&quot;&gt;nGen Works&lt;/a&gt;. He spoke about the human side of work, and gave some advice about how to manage stress.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
“Worrying about stress is worse than stress.” Stress is like exercise; it’s self-repairing if you don’t worry about it.  &lt;/li&gt;
  &lt;li&gt;
Sleep is not the enemy.  &lt;/li&gt;
  &lt;li&gt;
Go outside. Go for walks.  &lt;/li&gt;
  &lt;li&gt;
Play games. When you make up games and play them, you are cooperating, you are negotiating, you are competing.  &lt;/li&gt;
  &lt;li&gt;
Smiles are the secret weapon for kids. They hava a big impact, and smiling is addictive.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;em&gt;Carl related the story of his daughter’s lemonade stand and what he learned from her entrepreneurial spirit. His note about stress is very important: it does happen, and it will repair itself if we allow it.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Intersecting Worlds of Web and Education: A Foray into the Digital Frontier&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Erica Walker&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/ebwalker101&quot;&gt;@ebwalker101&lt;/a&gt; - &lt;a href=&quot;http://goo.gl/YqJb5S&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Erica Walker is a lecturer at Clemson University for graphic communications. She spoke about the differences and connection between formal and community education.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
What do we mean by community education? It’s informal. This conference is the epitome of community education. It’s about us, and our personal pursuit of education. The problem is that there are many, many places to go. How do you know where to go? We need to promote some sense of direction.&lt;/p&gt;
&lt;p&gt;
Both formal and community education could play nicely together. Formal education has dedicated class time, a set curriculum, and face-to-face interaction. However, formal education gives students no say in the curriculum, and it is expensive. Community education is available 24/7 and occurs on a self-directed basis. Still, the resources can be hard to sort through. &lt;/p&gt;
&lt;p&gt;
How can we mix the two together? We need a balance.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Erica touched upon an important issue: there is a large divide between formal education and the industry / community. There are opportunities for greater communication and collaboration between the two.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Styling Forms Semantically &amp;amp; Accessibly&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Amanda Cheung&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/acacheung&quot;&gt;@acacheung&lt;/a&gt; - &lt;a href=&quot;http://acacheung.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Amanda does front-end work at &lt;a href=&quot;http://dockyard.com/&quot;&gt;DockYard&lt;/a&gt;. She spoke about accessibility of forms on the web and demonstrated some of the common issues encountered by screen readers.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Accessibility efforts assist people with visual, motor, auditory, and cognitive disabilities. The steps we take to improve accessibility can actually improve the user experience for everyone.&lt;/p&gt;
&lt;p&gt;
Some simple things: allow the use of tabs to move between inputs. Have related labels for inputs to increase the clickable area. Make sure all selection choices are visible when the list is expanded. Bonus points if the inputs are visually engaging and “on brand.”&lt;/p&gt;
&lt;p&gt;
You can use abbreviation tags to help accessibility. If you don’t want labels, hide the text in such a way that a screen reader can still see it.&lt;/p&gt;
&lt;p&gt;
Some known issues: There are issues with tabbing through checkboxes on Safari, and it is difficult to style select dropdowns correctly.&lt;/p&gt;
&lt;p&gt;
There are some new and exciting input types: telephone, web, email, date, time, and number inputs. Ranges and colors, and even datalists.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Amanda’s attention to accessibility is something we can all learn from. It helps that, in many cases, accessibility falls in line with semantic markup. There are &lt;a href=&quot;http://a11yproject.com/&quot;&gt;plenty of resources&lt;/a&gt; out there to level-up with accessibility.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Let’s Be Brutally Honest About Operations and Pricing for Web Agencies&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Rob Harr&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/robertharr&quot;&gt;@robertharr&lt;/a&gt; - &lt;a href=&quot;http://seesparkbox.com/&quot;&gt;Sparkbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Rob Harr is the technical director at Sparkbox. He spoke about the day-to-day operations of an agency and gave advice based on his experience.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Operations means “getting crap done.” At Sparkbox, they use a micro-cash flow strategy: every Tuesday, they balance the accounts and do an outlook on the budget. In general, the best case scenario is that you have 6 months of runway if clients stop coming.&lt;/p&gt;
&lt;p&gt;
Your freedom is not free. Being good with your cash today will finance future business. Business forecasting is basically trying to predict the future. Don’t rely on it. &lt;/p&gt;
&lt;p&gt;
Options on how to price your work:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Fixed pricing. They’ve seen mixed results with this.  &lt;/li&gt;
  &lt;li&gt;
Hourly pricing. This is what they use.  &lt;/li&gt;
  &lt;li&gt;
Value pricing, i.e. figure out what the value of the product to the client is, and charge that.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
There is no right answer. Focus on adding value for your clients. Sparkbox does hourly pricing, and it works alright for them. The best way to price things is a continuous argument between business owners. They key thing is to focus on something that makes you money.&lt;/p&gt;
&lt;p&gt;
Initial engagement: users are bad at saying what they want, and software people don’t know what to expect. Before jumping in, do some paid discovery: perform a short project to “date” your client. This kind of a project usually doesn’t need as much approval from the client either.&lt;/p&gt;
&lt;p&gt;
Their rate: $165 per hour. They constantly review it and prototype it with new clients. They do something called collaborative pricing: share a google doc with the budget that the client can edit. There’s a 20% deposit for safety. Weekly invoices help cash flow. &lt;/p&gt;
&lt;p&gt;
They work for hire. As soon as a piece of software is written, the client owns it. This way there’s no licensing, no liability.&lt;/p&gt;
&lt;p&gt;
Some good ideas:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Know your terms.   &lt;/li&gt;
  &lt;li&gt;
Get a line of credit before you need it.   &lt;/li&gt;
  &lt;li&gt;
Get professional help. There are people who you can pay to help you with your business.  &lt;/li&gt;
  &lt;li&gt;
Know your legal documents. Check out &lt;a href=&quot;http://msabundle.com&quot;&gt;msabundle.com&lt;/a&gt;.  &lt;/li&gt;
  &lt;li&gt;
Find some owner friends. Every business is going through similar struggles.  &lt;/li&gt;
  &lt;li&gt;
Train your clients to think about your pricing model. For hourly pricing, the clients can see how much effort is being put into every piece of the project.  &lt;/li&gt;
  &lt;li&gt;
Have difficult conversations.  &lt;/li&gt;
  &lt;li&gt;
Decide as a team which parts of a project should be experimented with (ex. trying out new technologies).  &lt;/li&gt;
  &lt;li&gt;
Track your time. Increase your rates. Find better clients. Clients don’t grow with you.  &lt;/li&gt;
  &lt;li&gt;
Plan for taxes all year long.  &lt;/li&gt;
  &lt;li&gt;
Save your cash.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;em&gt;Rob’s experience at Sparkbox is one example of how to operate a business. His insistence that there is no right answer is probably the best business advice available.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Remote. Commit. Push&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Travis Miller&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/travismillerweb&quot;&gt;@travismillerweb&lt;/a&gt; - &lt;a href=&quot;http://www.travismillerweb.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Travis Miller is a developer at SPARK who lives and works in the Bahamas. He spoke about the challenges of working remotely and how to survive with the tools available.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Remote&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
It is difficult to work remotely while maintaining the feel of working in the office. Travis had to learn a lot: better communication, time management, client relations, creating content.&lt;/p&gt;
&lt;p&gt;
Seclusion was essential. He had to learn how to work with the limited tools that were available.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Commit&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
Committing is difficult. Nothing gets done unless you commit to learning something. Things like Grunt are exactly the kinds of tools you have to use while working remotely. If a computer can do it, let it. Sass is another good example: the code is maintainable, you build with change in mind, and it has a manageable architecture.&lt;/p&gt;
&lt;p&gt;
Working remotely depends on learning how to use the tools you already have. In his case, Google Drive allowed him to perform rapid prototyping and iterations on UX documents. He uses the collaboration tools in Drive to communicate with the client and perform revisions. Documents can link to each other, which allows you to keep a project’s information together and keep a single folder of bookmarks for each project. Revision history, of course, is another important feature.&lt;/p&gt;
&lt;p&gt;
The point is, there are incredible tools already at your disposal. When you work remotely, you have to exploit these as much as possible. &lt;/p&gt;
&lt;p&gt;
Communicating during development is already difficult; try doing it at a distance. Document things as you go to record the context of what you’re working on. Your documentation is like Wilson from Castaway. Travis suggests using Evernote (and Evernote for Chrome). You can take screenshots of what you are working on and add a short description.&lt;/p&gt;
&lt;p&gt;
The tools you use become your team.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Push&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
Part of the push is to get into the habit of using these tools. Another part is changing your outlook to accept the way things are.&lt;/p&gt;
&lt;p&gt;
Wherever you are in the world, share what you’ve learned. Travis was able to help establish a web community back home in the Bahamas.&lt;/p&gt;
&lt;p&gt;
Travis was remote, but he was never alone. Commit to being better. Push yourself and the people around you.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Travis’s resolve is a big encouragement. Even for people who do not work remotely, the lessons Travis spoke about can improve the entire development experience.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
No Control: Designing for the CMS-driven Web&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Andrew Norcross&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/norcross&quot;&gt;@norcross&lt;/a&gt; - &lt;a href=&quot;http://andrewnorcross.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Andrew Norcross is a developer at Reactiv Studios, as well as a WordPress core contributor. He spoke about the challenges that arise during the design and implementation of CMS-driven sites.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Norcross is not a designer; he can implement designs effectively though. Many times there is a gap between how something is designed, and how something is going to be used.&lt;/p&gt;
&lt;p&gt;
User-driven websites are becoming a much bigger part of the web today. There need to be additional design considerations made, but you don’t necessarily know about them during the design phase. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Users are inexperienced. We often need to take a step back and realize that what we know is very unique to our line of work.  &lt;/li&gt;
  &lt;li&gt;
Content focus is always changing. Examples: a blog post can change based on images, post formatting, videos, etc. The user can do all of those things without asking you, and they will find every edge case you didn’t think of. Magazine layouts are extremely variable. These things make designing very difficult.   &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
It is worth your time as a designer to know how the content is going to be run (i.e. which CMS). Collaboration is extremely important: as a designer, you should make clear the goal of your design to the person who is gong to implement it. There’s a good chance the implementer can make your life easier by presenting some of the tools available. Maybe keep a notes file or a written style guide to accompany the design.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Norcross, as Dan calls him, knows well the difference between a design and its implementation. His suggestion about making a written style guide to accompany the design seems like an excellent idea, even for non-CMS based projects.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
SMACSS Your Sass Up&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Mina Markham&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/minamarkham&quot;&gt;@minamarkham&lt;/a&gt; - &lt;a href=&quot;http://mina.is/speaking/smacss-sass/slides.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
Sometimes you need to make quick demo sites. These projects are the reason Mina got into modular CSS. You can see Drew Brontini’s talk for more about this. Mina likes to use SMACSS.&lt;/p&gt;
&lt;p&gt;
It’s a philosophy, not a framework. You can pick and choose the parts you want.&lt;/p&gt;
&lt;p&gt;
You categorize your CSS: base, layout, modules, states, and themes. This talk focuses on modules, where the bulk of the code lies.&lt;/p&gt;
&lt;p&gt;
Sass helps the process in a number of ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Namespacing with &lt;code class=&quot;inline&quot;&gt;&amp;amp;&lt;/code&gt;. With Sass 3.3, you can use &lt;code class=&quot;inline&quot;&gt;&amp;amp;-&lt;/code&gt; to add suffixes to your selectors.  &lt;/li&gt;
  &lt;li&gt;
Nesting - but be aware of the inception rule. The &lt;code class=&quot;inline&quot;&gt;&amp;amp;&lt;/code&gt; operator helps with this a little, but you probably shouldn’t be nesting too deep regardless.  &lt;/li&gt;
  &lt;li&gt;
&lt;code class=&quot;inline&quot;&gt;@extend&lt;/code&gt; helps in some cases to limit the number of classes you have to add to any given element, especially when dealing with submodules. Note: don’t extend between modules.  &lt;/li&gt;
  &lt;li&gt;
Sass 3.4 has some new selector functions. That’s one cool thing about Sass; it’s constantly evolving.  &lt;/li&gt;
  &lt;li&gt;
File structure. Sass partials and imports help you keep your modular code organized. This helps maintainability. Mina showed her way of organizing files.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Check out Mina.so/smacss for examples of how she works, and read the SMACSS book if you haven’t checked it out yet.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Mina’s personal journey leading up to her talk is a big encouragement. She’s a great example of what a healthy community can help to create.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Contextually Aware Web Design&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Matthew Carver&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/matthew_carver&quot;&gt;@matthew_carver&lt;/a&gt; - &lt;a href=&quot;http://www.matthewcarver.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Matthew Carver is the technology director at &lt;a href=&quot;http://www.bigspaceship.com/&quot;&gt;Big Spaceship&lt;/a&gt;. He spoke about creating sites that are fully aware of the context in which the user is viewing them.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
“Context is as important as content.” Responsive web design is all about being contextually aware.&lt;/p&gt;
&lt;p&gt;
Contextual awareness uses JavaScript to adjust a user’s experience based on available sensors. The expression within a media query is one example of a sensor.&lt;/p&gt;
&lt;p&gt;
Web design has historically been considered an observed medium, much like television. Contextual awareness comes from computing, and it does exist in the wild: Google uses your data to change your experience, and Apple has the M7 processor to utilize contextual information.&lt;/p&gt;
&lt;p&gt;
Four parts of the awareness:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
User: what do we know about the user? This can include accessibility and things like his/her data connection.  &lt;/li&gt;
  &lt;li&gt;
Task: what is the user’s goal? Maybe you can “clear the path” for that task.  &lt;/li&gt;
  &lt;li&gt;
Environment: where and when is the interaction taking place?  &lt;/li&gt;
  &lt;li&gt;
Technology: we focus on this a lot with responsive design. Beyond screen size, though, you also have to consider how the interactions are taking place (i.e. touch vs. pointer).  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
A contextual breakpoint is the point at which the context of the website has changed. For example, a coffee shop might want to change the visual centerpiece (picture of a drink) based on the time of day. The breakpoints in this case are morning, noon, and night.&lt;/p&gt;
&lt;p&gt;
Matt creates a global sensors JS object to contain all of the contextual breakpoints. Each breakpoint answers true-or-false questions like “is it morning?” That way, you can just say “if sensors.morning, do something.” Even better, use a for loop to iterate through all of the available sensors and add a class to the HTML or body tag. From there you can use CSS to modify the front-end accordingly.&lt;/p&gt;
&lt;p&gt;
Check out nome.js (link unavailable) for a library of contextual awareness. It covers most everything that is available.&lt;/p&gt;
&lt;p&gt;
Level 4 media queries open up a lot of new possibilities. One example is the luminosity query: you can augment your CSS based on dim, normal, and washed states. There are also custom query methods that are usable via JS. Pointer defines the size of target area covered by the pointer device (coarse or fine). Hover defines whether it is possible for the user to hover. Finally, there are display quality queries: scan, resolution, and update frequency. &lt;/p&gt;
&lt;p&gt;
iOS 8 seems to be built around contextual awareness. Physical information is making its way into the digital world. It’s happening, and all it requires is thoughtfulness and imagination.&lt;/p&gt;
&lt;p&gt;
With all of that said, do consider the “creepiness factor” of the assumptions you are making about your user.&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;The upcoming possibilities surrounding contextual awareness are quite exciting. Matthew did a good job of setting the tone for how the new sensors can be utilized.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
Design Pattern Craftsmanship&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Jason Beaird&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/jasongraphix&quot;&gt;@jasongraphix&lt;/a&gt; - &lt;a href=&quot;http://jasongraphix.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Jason Beaird is a front-end designer/developer at &lt;a href=&quot;http://mailchimp.com/&quot;&gt;MailChimp&lt;/a&gt;. He spoke about the use of patterns in sustainable web design.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
We tend to start with basic elements on the web, restyling things over and over. Jason believes this isn’t necessarily the best way of doing things.&lt;/p&gt;
&lt;p&gt;
If a project evolves over time, it runs the risk of becoming like a “frankenhouse”. For Mailchimp, a redesign required eliminating many small inconsistencies in markup and naming. They went through and derived all of the patterns they could find.&lt;/p&gt;
&lt;p&gt;
Using patterns allowed Jason to be a master craftsman again, not just a manual laborer.&lt;/p&gt;
&lt;p&gt;
Style guides and design standards manuals run in the same vein as pattern libraries, but sometimes they stifle creativity rather than encourage it.&lt;/p&gt;
&lt;p&gt;
Yet another Mailchimp redesign came in 2013 with a focus on responsive design. The pattern library from this redesign is public. It is meant to be used for a specific project or application, to create LEGO-like markup and style, contain elements that are used 3 or more times, and to be adaptable.&lt;/p&gt;
&lt;p&gt;
One of the main patterns they use is the slat, similar to Drew Barontini’s “bucket” in MVCSS.&lt;/p&gt;
&lt;p&gt;
“A good craftsperson builds their own tools.” - Dan Cederholm&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;The MailChimp &lt;a href=&quot;https://ux.mailchimp.com/patterns&quot;&gt;pattern library&lt;/a&gt; is definitely something to take a look at. Jason’s approach seems slightly more holistic than the modular CSS talks earlier in the conference, though different projects will likely require different types of thinking about front-end architecture.&lt;/em&gt;&lt;/p&gt;
&lt;hr class=&quot;thin&quot;&gt;
&lt;h3&gt;
A Frontender Builds a Backend: Learning to Think with your Eyes Closed&lt;/h3&gt;
&lt;p&gt;
&lt;strong&gt;Mason Stewart&lt;/strong&gt; - &lt;a href=&quot;https://twitter.com/masondesu&quot;&gt;@masondesu&lt;/a&gt; - &lt;a href=&quot;http://masondesu.com/&quot;&gt;Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;em&gt;Mason Stewart is the Lead Instructor at &lt;a href=&quot;http://theironyard.com/&quot;&gt;The Iron Yard&lt;/a&gt;. He spoke about the differences between front-end and back-end feedback that lead front-enders and back-enders to react differently to tasks in their opposite field.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
Why is back-end programming so scary to front-enders? It’s intimidating. They say you have to be a “certain kind of person.” But this isn’t how back-enders usually respond… They just do it.&lt;/p&gt;
&lt;p&gt;
It is important to remember that there isn’t some intellectual gap between front-enders and back-enders. So, we need to dispel the fears. &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Step one is to understand the similarities. We create for ourselves a bifurcated reality - a divide, a dichotomy - between front- and back-end that doesn’t really exist. (We build software in an almost perfect world. Things don’t just fall apart due to rust, age, etc. All of programming is similar in this way.)  &lt;/li&gt;
  &lt;li&gt;
Next, understand the differences. The primary difference is the type and degree of feedback. In the front-end, your feedback is primarily visual. JavaScript is a little better about giving informative feedback, but still not that much. Backend errors leave the realm of visual feedback entirely. “We have to learn to be okay with different types, different levels of feedback.”  &lt;/li&gt;
  &lt;li&gt;
Learn to play, and try not to worry. You don’t have to build cool things. Just build something. Relax.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;em&gt;Mason’s insight into the causes of intimidation for front-enders entering the back-end has the potential to be very helpful. The type and degree of feedback from each realm is indeed very different, and it requires a lot of time to become comfortable with each.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>

  
  
  <entry>
    <title>CreativeQ Project Reflection</title>
    <link rel="alternate" href="https://aj-foster.com/2014/creativeq-reflection/"/>
    <id>https://aj-foster.com/2014/creativeq-reflection/</id>
    <updated>2014-06-29T00:00:00Z</updated>
    <author>
      <name>AJ Foster</name>
    </author>
    <summary>Reflecting on the development of my first production Rails application.</summary>
    <content type="html">&lt;h3&gt;
Context&lt;/h3&gt;
&lt;p&gt;
The Office of Student Involvement at UCF has a team of graphic designers, web designers, and video production specialists to help market its many events. Because there are many groups within the office (student-led organizations that range from campus activities to volunteering), the “creatives” use a work order management system to collect, delegate, and track requests. Prior to this project, the graphic designers used a system called DesignQ, built using Ruby on Rails by &lt;a href=&quot;http://billcolumbia.me&quot;&gt;Bill Columbia&lt;/a&gt; during his time at OSI. My job was to transform DesignQ into CreativeQ, a system that would also incorporate requests for web and video work (as well as various minor changes/improvements).&lt;/p&gt;
&lt;p&gt;
For the purpose of learning more about Rails, I chose to develop CreativeQ from scratch with as little support from DesignQ as possible. The following is a reflection of that process.&lt;/p&gt;
&lt;h3&gt;
Planning&lt;/h3&gt;
&lt;p&gt;
It turns out, sketching out the models and their attributes is my favorite part of the Rails process. My coworker &lt;a href=&quot;http://jpcostallos.com&quot;&gt;JP&lt;/a&gt; and I stood in front of a whiteboard and talked through how different people would use the application. Luckily for us, we had seen how people used DesignQ. The “nouns” were simple: Users create Orders and are Assigned to Organizations. There are three main models and one join model between users and organizations.&lt;/p&gt;
&lt;p&gt;
Attributes of the User model are straightforward. An e-mail serves as a good login because most of the users have @ucf.edu e-mail addresses based on their position in the organization. Not only is this a succinct way of telling the creative what role a requester plays in their organization, it also allows accounts to be passed on when personnel change. A name is obviously important, and for ease of sorting there are separate first_name and last_name attributes. For authorization, there is a “role” attribute.&lt;/p&gt;
&lt;p&gt;
In DesignQ, the roles were Unapproved, Basic, Designer, Advisor, and Admin. Basic users generally requested the orders, Advisors approved them, and Designers completed them. While this makes sense (roles have a one-to-one correspondence for the action a user is most likely to perform) I did not like the coupling of the advisor role and their organization assignments. To me, it makes more sense to shift the idea of being an advisor to the organization assignment model.&lt;/p&gt;
&lt;p&gt;
As a result, the organization assignment model connects a user with an organization, and has a single auxiliary attribute: “role”, which describes the user as either a member or an advisor.&lt;/p&gt;
&lt;p&gt;
Organizations are simply named groups of users, though in the future it may be helpful to store statistics about the organization within the model.&lt;/p&gt;
&lt;p&gt;
Orders were the main focus of our discussion. Abstracting the model’s structure from the graphics-only setup of DesignQ to something that supports graphics, web, and video orders was the entire purpose of the application. Some things are constant across all orders: each has a name, a due date, and a large text description. A “type” attribute is necessary to scope which orders each creative sees. Sometimes the order has an event associated, in which case an event location and date/time is helpful. Finally, every order has a series of needs.&lt;/p&gt;
&lt;p&gt;
Needs take on very different forms depending on the type of order. For graphics, these are often sizes (handbill, poster, A-frame, etc.). For web they are tasks (new website, new design, new content). Video production orders are even more diverse. The cleanest way to store the needs of each order in a type-agnostic way seems to be a hash. We use PostgreSQL, and with Rails 4 there is native support for the &lt;code class=&quot;inline&quot;&gt;hstore&lt;/code&gt; data type.&lt;/p&gt;
&lt;p&gt;
A hash doesn’t care whether its contents relate to a specific type of order, where separate fields would. Still, the process of setting the possible needs for a requester to choose from has to be clean. I decided to make the lists of needs an attribute of the Order class (essentially a series of arrays) from which the controllers and views derive what they need.&lt;/p&gt;
&lt;p&gt;
Pros:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Changing the possible needs of an order only requires modifying an array of human-readable values in the order model.  &lt;/li&gt;
  &lt;li&gt;
The same list decides both the form fields to display and which hash values to check for when displaying information about the order.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
Using the array generally requires transforming its strings into symbols.  &lt;/li&gt;
  &lt;li&gt;
The behavior of the need-related fields is different for each order. For example, while graphics orders require the requester to input a size for each need (i.e. &lt;code class=&quot;inline&quot;&gt;{:handbill =&amp;gt; &amp;#39;4&amp;quot; x 6&amp;quot;&amp;#39;, :poster =&amp;gt; &amp;#39;11&amp;quot; x 17&amp;quot;&amp;#39;}&lt;/code&gt;), web orders don’t require any input (&lt;code class=&quot;inline&quot;&gt;{:new_design =&amp;gt; &amp;#39;&amp;#39;}&lt;/code&gt;) and video production orders only allow the requester to choose one type of video at a time (pre-event promotion, post-event recap, etc.). Thus, while the needs can be iterated to create form fields, those fields are not type-agnostic.  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Still, a hash seems like the cleanest way to store the data in this relatively small-scale application. While we’re at it, we might as well use an &lt;code class=&quot;inline&quot;&gt;hstore&lt;/code&gt; attribute for the related-event information as well, since it is all optional.&lt;/p&gt;
&lt;h3&gt;
Implementation Difficulties&lt;/h3&gt;
&lt;p&gt;
Although the majority of the application’s implementation went smoothly, there is always some trouble along the way.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;What orders can you read?&lt;/strong&gt; The logic surrounding just which orders should be shown is not difficult, but complicated by the lack of an “#or” in Active Record. In the order index action, I would prefer to rely on Postgres to pick out the superset of all orders a user may view (orders he/she owns, claims, can claim, or advises); a database engine is created with such a task in mind, and Ruby is comparatively slow at iterating through orders and checking readability. Of course, the office will never grow to a scale for this to matter, but that’s &lt;em&gt;no excuse&lt;/em&gt; for poor code design.&lt;/p&gt;
&lt;p&gt;
Unfortunately this requires writing long SQL statements within the Active Record queries: &lt;code class=&quot;inline&quot;&gt;scope :readable, -&amp;gt; (user) { where(&amp;quot;owner_id = ? OR creative_id = ? OR ...&lt;/code&gt;. &lt;em&gt;Note: I could have jumped into Arel and written my queries in that manner, but that would severely hinder the readability of the code. In my view, friends don’t force their successors to dive into Arel.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;
If #or is added (see &lt;a href=&quot;https://github.com/rails/rails/pull/9052&quot;&gt;this pull request&lt;/a&gt;), the query could be split into separate scopes and chained together with #or.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Why are there so many queries?&lt;/strong&gt; There are a lot of unnecessary database queries being made throughout the application, and this is something I’m still working on. Proper use of joins() would solve a lot of this easily. It’s just a matter of testing with a proper data set and tracking down the source.&lt;/p&gt;
&lt;p&gt;
&lt;strong&gt;Why doesn’t FancyBox work?&lt;/strong&gt; Oh, Turbolinks. I really enjoyed the mystery of the unresponsive FancyBox; because the plugin adds an element to the page and initializes on &lt;code class=&quot;inline&quot;&gt;$(document).ready()&lt;/code&gt;, it doesn’t work when Turbolinks loads the page and &lt;code class=&quot;inline&quot;&gt;ready()&lt;/code&gt; is never fired. A &lt;a href=&quot;https://github.com/mikbe/fancybox2-rails&quot;&gt;slightly modified version of the plugin&lt;/a&gt; works well enough for now, but there are still problems: most importantly, FancyBox does not work when you’ve used the browser’s back button. I’ve forked mikbe’s repository and continue to investigate the best way to handle this. &lt;em&gt;Hint: use another plugin if you can.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
Looking Forward&lt;/h3&gt;
&lt;p&gt;
There are a few minor changes that need to be made for video production orders. Given that they’ve never used a work-order system before, it isn’t surprising that both the system and the producers need to adjust for one another. Besides that, there are a few things I’d like to add:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
User and order retirement policy: data about users and their orders doesn’t need to be kept long after they leave the office. Although users sometimes like to refer to past orders (especially for recurring events), this never occurs for orders more than a year old. At the least, retiring data to an archive database would assist with query speeds. A monthly cron-like feature could 1) warn administrators of the Users to be removed next month and 2) automatically remove users whose updated_at dates are greater than three years in the past.  &lt;/li&gt;
  &lt;li&gt;
Attaching files: this is one of the most popular requests. This is not difficult to do, but it is difficult to decide how the feature should fit into the existing communication between creatives, requesters, and their advisors. If added, the feature should also encapsulate the process of approving the design or production.  &lt;/li&gt;
  &lt;li&gt;
Order statistics: I’m actively working on adding statistics throughout the app: how many orders did an organization make in the past __ months? How many orders were completed by each designer? What’s the average length of time for the orders?  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;strong&gt;Most Importantly&lt;/strong&gt;, there is a set of common tasks that should be documented. For example, the needs of each type of order can be changed in the order model. This is something that a future web designer in my position will want to do.&lt;/p&gt;
&lt;h3&gt;
Conclusion&lt;/h3&gt;
&lt;p&gt;
CreativeQ was a lot of fun to build, and I enjoyed seeing the project through from start to finish. There are many things you just can’t learn until you endeavor to put a project in production.&lt;/p&gt;
&lt;p&gt;
Many thanks to OSI for allowing me to take on the project on their time, and for supporting the use of Rails. Also, a big thank you to &lt;a href=&quot;http://billcolumbia.me&quot;&gt;Bill&lt;/a&gt; for making DesignQ and getting me interested in Rails to begin with.&lt;/p&gt;
&lt;p&gt;
You can check out the source of the project &lt;a href=&quot;https://github.com/aj-foster/CreativeQ&quot;&gt;on GitHub&lt;/a&gt;. Please do feel free, dear reader, to open issues and start discussion on anything you notice about the application. If you have use for something similar, talk to me! I’m happy to offer you the lessons I learned while building this.&lt;/p&gt;
&lt;p&gt;
As always, contact me &lt;a href=&quot;http://twitter.com/austin_j_foster&quot;&gt;on Twitter&lt;/a&gt; anytime.&lt;/p&gt;
</content>
  </entry>

</feed>
